
==================== FINAL INTERFACE ====================
2016-10-21 16:03:48.442777 UTC

interface hw5-0.1.0.0-1fLzu6nyqqO1Ivpu7UzSSs:Parser 8001
  interface hash: b1d39bbcb1592d5bc398da3868967368
  ABI hash: 59cae5763da074f81b0ad010f3cee2b9
  export-list hash: ab869b9d07c45eed38a50cdddfa93df1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.abParser
  Parser.first
  Parser.Parser{Parser.Parser runParser}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
0dad20d011d2d72ce9ba691acc592ed6
  $fApplicativeParser :: GHC.Base.Applicative Parser.Parser
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Parser
                  Parser.$fFunctorParser
                  Parser.$fApplicativeParser_$cpure
                  Parser.$fApplicativeParser_$c<*>
                  Parser.$fApplicativeParser_$c*>
                  Parser.$fApplicativeParser_$c<* -}
0dad20d011d2d72ce9ba691acc592ed6
  $fApplicativeParser1 ::
    Parser.Parser a
    -> Parser.Parser b
    -> GHC.Base.String
    -> GHC.Base.Maybe (a, GHC.Base.String)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (eta :: Parser.Parser a)
                   (eta1 :: Parser.Parser b)
                   (eta2 :: GHC.Base.String) ->
                 case eta `cast` (Parser.N:Parser[0] <a>_R) eta2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (a, GHC.Base.String)
                   GHC.Base.Just x
                   -> case x of wild1 { (,) x1 y ->
                      case eta1 `cast` (Parser.N:Parser[0] <b>_R) y of wild2 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ (a, GHC.Base.String)
                        GHC.Base.Just x2
                        -> GHC.Base.Just
                             @ (a, GHC.Base.String)
                             (case x2 of wild3 { (,) x3 y1 -> (x1, y1) }) } } }) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fApplicativeParser2 ::
    Parser.Parser a
    -> Parser.Parser b
    -> GHC.Base.String
    -> GHC.Base.Maybe (b, GHC.Base.String)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (eta :: Parser.Parser a)
                   (eta1 :: Parser.Parser b)
                   (eta2 :: GHC.Base.String) ->
                 case eta `cast` (Parser.N:Parser[0] <a>_R) eta2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (b, GHC.Base.String)
                   GHC.Base.Just x
                   -> case x of wild1 { (,) x1 y ->
                      eta1 `cast` (Parser.N:Parser[0] <b>_R) y } }) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fApplicativeParser3 ::
    Parser.Parser (a -> b)
    -> Parser.Parser a
    -> GHC.Base.String
    -> GHC.Base.Maybe (b, GHC.Base.String)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (p1 :: Parser.Parser (a -> b))
                   (p2 :: Parser.Parser a)
                   (eta :: GHC.Base.String) ->
                 case p1 `cast` (Parser.N:Parser[0] <a -> b>_R) eta of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (b, GHC.Base.String)
                   GHC.Base.Just x
                   -> case x of wild1 { (,) x1 y ->
                      case p2 `cast` (Parser.N:Parser[0] <a>_R) y of wild2 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ (b, GHC.Base.String)
                        GHC.Base.Just x2
                        -> GHC.Base.Just
                             @ (b, GHC.Base.String)
                             (Parser.first @ a @ b @ GHC.Base.String x1 x2) } } }) -}
44fa78bec9a9589b2637b0687a7630f7
  $fApplicativeParser4 ::
    a -> GHC.Base.String -> GHC.Base.Maybe (a, GHC.Base.String)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: a) (s :: GHC.Base.String) ->
                 GHC.Base.Just @ (a, GHC.Base.String) (x, s)) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fApplicativeParser_$c*> ::
    Parser.Parser a -> Parser.Parser b -> Parser.Parser b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.$fApplicativeParser2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Parser.Parser a>_R
                 ->_R <Parser.Parser b>_R
                 ->_R Sym (Parser.N:Parser[0] <b>_R)) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fApplicativeParser_$c<* ::
    Parser.Parser a -> Parser.Parser b -> Parser.Parser a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.$fApplicativeParser1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Parser.Parser a>_R
                 ->_R <Parser.Parser b>_R
                 ->_R Sym (Parser.N:Parser[0] <a>_R)) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fApplicativeParser_$c<*> ::
    Parser.Parser (a -> b) -> Parser.Parser a -> Parser.Parser b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.$fApplicativeParser3
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Parser.Parser (a -> b)>_R
                 ->_R <Parser.Parser a>_R
                 ->_R Sym (Parser.N:Parser[0] <b>_R)) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fApplicativeParser_$cpure :: a -> Parser.Parser a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Parser.$fApplicativeParser4
                  `cast`
                (forall (a :: <*>_N). <a>_R ->_R Sym (Parser.N:Parser[0] <a>_R)) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fFunctorParser :: GHC.Base.Functor Parser.Parser
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Parser
                  Parser.$fFunctorParser_$cfmap
                  Parser.$fFunctorParser_$c<$ -}
0dad20d011d2d72ce9ba691acc592ed6
  $fFunctorParser1 ::
    a
    -> Parser.Parser b
    -> GHC.Base.String
    -> GHC.Base.Maybe (a, GHC.Base.String)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Parser.Parser b)
                   (eta2 :: GHC.Base.String) ->
                 case eta1 `cast` (Parser.N:Parser[0] <b>_R) eta2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (a, GHC.Base.String)
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ (a, GHC.Base.String)
                        (case x of wild1 { (,) x1 y -> (eta, y) }) }) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fFunctorParser2 ::
    (a -> b)
    -> Parser.Parser a
    -> GHC.Base.String
    -> GHC.Base.Maybe (b, GHC.Base.String)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (p :: Parser.Parser a)
                   (eta :: GHC.Base.String) ->
                 case p `cast` (Parser.N:Parser[0] <a>_R) eta of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (b, GHC.Base.String)
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ (b, GHC.Base.String)
                        (Parser.first @ a @ b @ GHC.Base.String f x) }) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fFunctorParser_$c<$ :: a -> Parser.Parser b -> Parser.Parser a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.$fFunctorParser1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Parser.Parser b>_R
                 ->_R Sym (Parser.N:Parser[0] <a>_R)) -}
0dad20d011d2d72ce9ba691acc592ed6
  $fFunctorParser_$cfmap ::
    (a -> b) -> Parser.Parser a -> Parser.Parser b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.$fFunctorParser2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Parser.Parser a>_R
                 ->_R Sym (Parser.N:Parser[0] <b>_R)) -}
b22dc30c597fb68ba713a2e9b377e2f0
  $tc'Parser :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14854407906199234207##
                   11314719638848530304##
                   Parser.$trModule
                   Parser.$tc'Parser1) -}
d31f1de12553d23ddf0339bca80e998b
  $tc'Parser1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Parser"#) -}
ff8dae8a5e7548cf42f84257284681c1
  $tcParser :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11299203243118223481##
                   8561884556723491493##
                   Parser.$trModule
                   Parser.$trModule1) -}
118e3c738f2bb850799b604f382817eb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parser.$trModule2
                   Parser.$trModule1) -}
0fbdaa0f5d64f8836137c24cc03a4efd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parser"#) -}
9e65126445dbdf571b90cf73a800c296
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hw5-0.1.0.0-1fLzu6nyqqO1Ivpu7UzSSs"#) -}
0dad20d011d2d72ce9ba691acc592ed6
  newtype Parser a
    = Parser {runParser :: GHC.Base.String
                           -> GHC.Base.Maybe (a, GHC.Base.String)}
a4f92b7fe758624d503ba5f9f8634ef5
  abParser :: Parser.Parser (GHC.Types.Char, GHC.Types.Char)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Parser.abParser1
                  `cast`
                (Sym (Parser.N:Parser[0] <(GHC.Types.Char, GHC.Types.Char)>_R)) -}
cae774d7bb82bc1b3e01d065a8f5d7f2
  abParser1 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         ((GHC.Types.Char, GHC.Types.Char), GHC.Base.String)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 GHC.Base.Just
                   @ ((GHC.Types.Char, GHC.Types.Char), GHC.Base.String)
                   (Parser.abParser_x, s)) -}
cab247caef4910cd2d3c86c9d25b4da9
  abParser2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'b'#) -}
acdf2ab03906d00245c5b864774edd8f
  abParser3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'a'#) -}
f3ee4f9b32f10c933e85cf016c8b7fe1
  abParser_x :: (GHC.Types.Char, GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Parser.abParser3, Parser.abParser2)) -}
2600e20328838d79a142a12046c66339
  first :: (a -> b) -> (a, c) -> (b, c)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b @ c (f :: a -> b) (ds :: (a, c)) ->
                 case ds of wild { (,) x y -> (f x, y) }) -}
83606fe1e2d5cf3f74a76c53b8d0891c
  runParser ::
    Parser.Parser a
    -> GHC.Base.String -> GHC.Base.Maybe (a, GHC.Base.String)
  RecSel Left Parser.Parser
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Parser.runParser1
                  `cast`
                (forall (a :: <*>_N).
                 <Parser.Parser a>_R ->_R Parser.N:Parser[0] <a>_R) -}
6a1bcb1bc519f9b7919d2d39793ebeb4
  runParser1 :: Parser.Parser a -> Parser.Parser a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Parser.Parser a) -> ds) -}
instance [safe] GHC.Base.Applicative [Parser.Parser]
  = Parser.$fApplicativeParser
instance [safe] GHC.Base.Functor [Parser.Parser]
  = Parser.$fFunctorParser
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

