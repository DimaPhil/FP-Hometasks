
==================== FINAL INTERFACE ====================
2016-11-14 14:12:10.568995 UTC

interface hw7-0.1.0.0-17DQWlDqMzvGTs6m332wVc:ExprParser 8001
  interface hash: 2c8b44eeaf699552aae2c45d2b76a409
  ABI hash: cd208dc31abcc31e6b23f57a1f97b2c8
  export-list hash: 3e081f0783f27c087cc07553e20912c6
  orphan hash: b078c146bf8f436d070a7e82af998595
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  ExprParser.einfo
  ExprParser.eval
  ExprParser.exprParser
  ExprParser.identifier
  ExprParser.integer
  ExprParser.lexeme
  ExprParser.operators
  ExprParser.pairs
  ExprParser.parens
  ExprParser.parseExpression
  ExprParser.parseIO
  ExprParser.parsePair
  ExprParser.parsePairs
  ExprParser.sc
  ExprParser.symbol
  ExprParser.term
  ExprParser.BinOperation{ExprParser.Add ExprParser.Divide ExprParser.Multiply ExprParser.Power ExprParser.Subtract}
  ExprParser.Expr{ExprParser.Binary ExprParser.Const ExprParser.Neg ExprParser.Variable}
  ExprParser.ExpressionInfo{ExprParser.ExpressionInfo expr output values}
  ExprParser.Output{ExprParser.Eval ExprParser.PrintAst}
module dependencies:
package dependencies: QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-LVnipygDrAR1FEMFhjxcQX
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      process-1.4.2.0@process-1.4.2.0
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      scientific-0.3.4.9@scientific-0.3.4.9-6oTYuCcx6H5BsTGU7D2Gk3
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.0@unix-2.7.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Error
                         megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Pos
                         megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Prim
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec c0cfb5269cef950d2204006044f445db
import  -/  megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Char 39574ee9a64fa35f056fa4a4eac95b2c
import  -/  megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Combinator 26de4a141d02faad5713cf552b18c4c3
import  -/  megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Expr ef4c739128fda86d74ed829e77c78892
import  -/  megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Lexer 5bf84b81d4c9192e052f2239e29502af
import  -/  megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Prim a48163362fec4793f611236490b4b315
import  -/  megaparsec-5.1.2@megaparsec-5.1.2-DBAYFN506o94vy7yIIxsWg:Text.Megaparsec.Text 5497e8bce1a23959a2a4d0ddbb59adc8
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class a2c7beb266585be238cfe9f5989c52b7
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative 031c88d485c50b485154c1052ead17f6
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Builder 3a6eae459efd37ad249a0debb46d23c8
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Extra 0631fb19461b4d86718462c74fa1f864
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Types 036a614c38cc82a70634cd11ce8cd86f
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text 6515f3179e27a91345842b6e634f584c
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Internal 530216acfbfab25df053b0caac6d6a57
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show c6fc4b1a4431943028eb6eb78b495e09
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
ec631afba1bfab280aa0e9c6c09c2e09
  $fShowBinOperation :: GHC.Show.Show ExprParser.BinOperation
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ExprParser.BinOperation
                  ExprParser.$fShowBinOperation_$cshowsPrec
                  ExprParser.$fShowBinOperation_$cshow
                  ExprParser.$fShowBinOperation_$cshowList -}
2998feffb0d338a648a82bec6da9d46d
  $fShowBinOperation1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Power"#) -}
b849e40c2471d19a5d6af3804972e16f
  $fShowBinOperation2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Divide"#) -}
a8f45240dcec6aab72d05914eb7b7122
  $fShowBinOperation3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Multiply"#) -}
c2cd49d397e95f027fa55f7cb50a2b51
  $fShowBinOperation4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subtract"#) -}
54eb886284376ce102903b638370019a
  $fShowBinOperation5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Add"#) -}
ec631afba1bfab280aa0e9c6c09c2e09
  $fShowBinOperation_$cshow ::
    ExprParser.BinOperation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ExprParser.BinOperation) ->
                 ExprParser.$fShowBinOperation_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ec631afba1bfab280aa0e9c6c09c2e09
  $fShowBinOperation_$cshowList ::
    [ExprParser.BinOperation] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ ExprParser.BinOperation
                   ExprParser.$w$cshowsPrec) -}
ec631afba1bfab280aa0e9c6c09c2e09
  $fShowBinOperation_$cshowsPrec ::
    GHC.Types.Int -> ExprParser.BinOperation -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ExprParser.BinOperation)
                   (w2 :: GHC.Base.String) ->
                 ExprParser.$w$cshowsPrec w1 w2) -}
b081d932bc4627923ea14353bdf6b5d8
  $fShowExpr :: GHC.Show.Show ExprParser.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ExprParser.Expr
                  ExprParser.$fShowExpr_$cshowsPrec
                  ExprParser.$fShowExpr_$cshow
                  ExprParser.$fShowExpr_$cshowList -}
b081d932bc4627923ea14353bdf6b5d8
  $fShowExpr1 :: ExprParser.Expr -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: ExprParser.Expr) (w1 :: GHC.Base.String) ->
                 ExprParser.$w$cshowsPrec1 0# w w1) -}
b081d932bc4627923ea14353bdf6b5d8
  $fShowExpr_$cshow :: ExprParser.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ExprParser.Expr) ->
                 ExprParser.$fShowExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b081d932bc4627923ea14353bdf6b5d8
  $fShowExpr_$cshowList :: [ExprParser.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ ExprParser.Expr
                   ExprParser.$fShowExpr1) -}
b081d932bc4627923ea14353bdf6b5d8
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> ExprParser.Expr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ExprParser.Expr)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ExprParser.$w$cshowsPrec1 ww1 w1 w2 }) -}
b73fa27cb08bb732fe3ead47a53dc991
  $fShowExpressionInfo :: GHC.Show.Show ExprParser.ExpressionInfo
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ExprParser.ExpressionInfo
                  ExprParser.$fShowExpressionInfo_$cshowsPrec
                  ExprParser.$fShowExpressionInfo_$cshow
                  ExprParser.$fShowExpressionInfo_$cshowList -}
b73fa27cb08bb732fe3ead47a53dc991
  $fShowExpressionInfo1 ::
    ExprParser.ExpressionInfo -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: ExprParser.ExpressionInfo)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { ExprParser.ExpressionInfo ww1 ww2 ww3 ->
                 ExprParser.$w$cshowsPrec2 0# ww1 ww2 ww3 w1 }) -}
9d64addea433c356124f26158363bcf2
  $fShowExpressionInfo2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrintAst"#) -}
61d8f554f23e1a2417771a1f545b6054
  $fShowExpressionInfo3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Eval"#) -}
80ac9500c718dae8fb7a9150f7cbeca0
  $fShowExpressionInfo4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
f1158ea62c8552ae48b7fce2bf2bfe6e
  $fShowExpressionInfo5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "values = "#) -}
492070fd8fc585b1156a6a3fe446592e
  $fShowExpressionInfo6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "expr = "#) -}
bbbfb406f0dcc288b1941d704b61acdf
  $fShowExpressionInfo7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
1c4c791e1125764948217b9bd41d3656
  $fShowExpressionInfo8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "output = "#) -}
7479c5782ca5b27b789aefd3e5d0f830
  $fShowExpressionInfo9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ExpressionInfo {"#) -}
b73fa27cb08bb732fe3ead47a53dc991
  $fShowExpressionInfo_$cshow ::
    ExprParser.ExpressionInfo -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U,U,U),1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ExprParser.ExpressionInfo) ->
                 ExprParser.$fShowExpressionInfo_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b73fa27cb08bb732fe3ead47a53dc991
  $fShowExpressionInfo_$cshowList ::
    [ExprParser.ExpressionInfo] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ ExprParser.ExpressionInfo
                   ExprParser.$fShowExpressionInfo1) -}
b73fa27cb08bb732fe3ead47a53dc991
  $fShowExpressionInfo_$cshowsPrec ::
    GHC.Types.Int -> ExprParser.ExpressionInfo -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U,U,U),1*U(U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ExprParser.ExpressionInfo)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { ExprParser.ExpressionInfo ww3 ww4 ww5 ->
                 ExprParser.$w$cshowsPrec2 ww1 ww3 ww4 ww5 w2 } }) -}
20f78f1114eb8e0179406b7811b08e34
  $fShowOutput :: GHC.Show.Show ExprParser.Output
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ExprParser.Output
                  ExprParser.$fShowOutput_$cshowsPrec
                  ExprParser.$fShowOutput_$cshow
                  ExprParser.$fShowOutput_$cshowList -}
20f78f1114eb8e0179406b7811b08e34
  $fShowOutput1 :: ExprParser.Output -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: ExprParser.Output) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   ExprParser.Eval
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           ExprParser.$fShowExpressionInfo3)
                        eta
                   ExprParser.PrintAst
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           ExprParser.$fShowExpressionInfo2)
                        eta }) -}
20f78f1114eb8e0179406b7811b08e34
  $fShowOutput_$cshow :: ExprParser.Output -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ExprParser.Output) ->
                 case x of wild {
                   ExprParser.Eval -> ExprParser.$fShowExpressionInfo3
                   ExprParser.PrintAst -> ExprParser.$fShowExpressionInfo2 }) -}
20f78f1114eb8e0179406b7811b08e34
  $fShowOutput_$cshowList :: [ExprParser.Output] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ ExprParser.Output
                   ExprParser.$fShowOutput1) -}
20f78f1114eb8e0179406b7811b08e34
  $fShowOutput_$cshowsPrec ::
    GHC.Types.Int -> ExprParser.Output -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: ExprParser.Output)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   ExprParser.Eval
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           ExprParser.$fShowExpressionInfo3)
                        eta
                   ExprParser.PrintAst
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           ExprParser.$fShowExpressionInfo2)
                        eta }) -}
0243c1b23910fceeccf27e9106e07687
  $s$fAlternativeParsecT ::
    GHC.Base.Alternative
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
                  (ExprParser.$s$fAlternativeParsecT_$s$fApplicativeParsecT @ m)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cempty
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$c<|>
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$csome
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmany
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0) -}
4eaa259f9c164a5dcbe17baec0a85d03
  $s$fAlternativeParsecT_$s$fApplicativeParsecT ::
    GHC.Base.Applicative
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
                  (ExprParser.$s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative
                     @ m)
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$cpure
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c<*>
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c*>
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c<*
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0) -}
50a532c4dc3898946678a45e1c0cf8c7
  $s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative ::
    GHC.Base.Functor
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Text.Megaparsec.Prim.$fFunctorParsecT
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text) -}
6a1a68eaa73a31061d2deb0ccf6c5389
  $s$fMonadParsecT ::
    GHC.Base.Monad
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
                  (Text.Megaparsec.Prim.$fMonadParsecT_$cp1Monad
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecT_$c>>=
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecT_$c>>
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecT_$creturn
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecT_$cfail
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0) -}
8923b8064dc42d0a56b39a6918b5e421
  $s$fMonadParsecesParsecT ::
    Text.Megaparsec.Prim.MonadParsec
      Text.Megaparsec.Error.Dec
      Data.Text.Internal.Text
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ Text.Megaparsec.Error.Dec
                  @ Data.Text.Internal.Text
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
                  (ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec
                     @ m)
                  (ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec
                     @ m)
                  (ExprParser.$s$fAlternativeParsecT @ m)
                  (ExprParser.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cfailure
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel
                     @ m)
                  (ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden
                     @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctry
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$clookAhead
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cnotFollowedBy
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cwithRecovery
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cobserving
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ceof
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken
                     @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctokens
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cgetParserState
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cupdateParserState
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0) -}
380bfd78613597d2fcc50e59bc125177
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec Data.Text.Internal.Text m a
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (m :: * -> *)
                   @ a
                   (eta :: Text.Megaparsec.Prim.ParsecT
                             Text.Megaparsec.Error.Dec Data.Text.Internal.Text m a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall b.
                      Text.Megaparsec.Prim.State Data.Text.Internal.Text
                      -> (a
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                      -> (a
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                      -> m b)
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec Data.Text.Internal.Text m a)
                   (\ (tpl :: forall b.
                              Text.Megaparsec.Prim.State Data.Text.Internal.Text
                              -> (a
                                  -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                              -> (a
                                  -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                              -> m b) ->
                    tpl)
                     `cast`
                   (<forall b.
                     Text.Megaparsec.Prim.State Data.Text.Internal.Text
                     -> (a
                         -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                     -> (a
                         -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                     -> m b>_R
                    ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                  <Text.Megaparsec.Error.Dec>_N
                                  <Data.Text.Internal.Text>_N
                                  <m>_R
                                  <a>_R))
                   (\ @ b
                      (s1 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                      (cok :: a
                              -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              -> m b)
                      (cerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                      (eok :: a
                              -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              -> m b)
                      (eerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b) ->
                    let {
                      cl :: GHC.Base.Maybe
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                      = Text.Megaparsec.Prim.$fMonadParsecesParsecT_$s<$>
                          @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                          (\ (x :: Data.List.NonEmpty.NonEmpty GHC.Types.Char)[OneShot] ->
                           Text.Megaparsec.Error.Label
                             @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                             (Data.Semigroup.$fSemigroupNonEmpty_$c<>
                                @ GHC.Types.Char
                                (Data.List.NonEmpty.fromList
                                   @ GHC.Types.Char
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b1 -> GHC.CString.unpackFoldrCString# @ b1 "rest of "#)))
                                x))
                          (Data.List.NonEmpty.nonEmpty
                             @ GHC.Types.Char
                             (GHC.Types.[] @ GHC.Types.Char))
                    } in
                    let {
                      el :: GHC.Base.Maybe
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                      = Text.Megaparsec.Prim.$fMonadParsecesParsecT_$s<$>
                          @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                          (Text.Megaparsec.Error.Label
                             @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                          (Data.List.NonEmpty.nonEmpty
                             @ GHC.Types.Char
                             (GHC.Types.[] @ GHC.Types.Char))
                    } in
                    Text.Megaparsec.Prim.unParser
                      @ Text.Megaparsec.Error.Dec
                      @ Data.Text.Internal.Text
                      @ m
                      @ a
                      eta
                      @ b
                      s1
                      (\ (x :: a)
                         (s' :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                         (hs :: Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)) ->
                       cok
                         x
                         s'
                         (Text.Megaparsec.Prim.refreshLastHint
                            @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            hs
                            cl))
                      cerr
                      (\ (x :: a)
                         (s' :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                         (hs :: Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)) ->
                       eok
                         x
                         s'
                         (Text.Megaparsec.Prim.refreshLastHint
                            @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            hs
                            el))
                      (\ (err :: Text.Megaparsec.Error.ParseError
                                   (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                   Text.Megaparsec.Error.Dec) ->
                       eerr
                         (case err of wild { Text.Megaparsec.Error.ParseError ds ds1 ds2 ds3 ->
                          Text.Megaparsec.Error.ParseError
                            @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            @ Text.Megaparsec.Error.Dec
                            ds
                            ds1
                            (Data.Maybe.maybe
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                               @ (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                               (Data.Set.Base.Tip
                                  @ (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                               (Data.Set.Base.singleton
                                  @ (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                               el)
                            ds3 })))) -}
e1a0baec836d80acbb66bb9c63284afc
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel ::
    GHC.Base.String
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m a
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m a
  {- Arity: 2, Strictness: <L,U><L,C(C1(C1(C1(C1(U)))))>,
     Unfolding: InlineRule (0, True, True)
                (Text.Megaparsec.Prim.pLabel
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text) -}
f437670e1e82ea57b37df28b99cf412d
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec ::
    Text.Megaparsec.Error.ErrorComponent Text.Megaparsec.Error.Dec
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ (m :: * -> *) -> Text.Megaparsec.Error.$fErrorComponentDec) -}
9cc932a88b23f98e212783a662b0b24f
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec ::
    Text.Megaparsec.Prim.Stream Data.Text.Internal.Text
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ (m :: * -> *) -> Text.Megaparsec.Prim.$fStreamText0) -}
6cefd3e117d6c61213d33d80e6c70c70
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken ::
    (Text.Megaparsec.Prim.Token Data.Text.Internal.Text
     -> Data.Either.Either
          (Data.Set.Base.Set
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)),
           Data.Set.Base.Set
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)),
           Data.Set.Base.Set Text.Megaparsec.Error.Dec)
          a)
    -> GHC.Base.Maybe
         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m a
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,1*U><S(S(LLS)SL),1*U(U(U,U,U),U(U(U,U,U),U),U(U))><L,1*C1(C1(C1(U)))><L,A><L,A><L,1*C1(C1(U))>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (m :: * -> *)
                   @ a
                   (eta :: Text.Megaparsec.Prim.Token Data.Text.Internal.Text
                           -> Data.Either.Either
                                (Data.Set.Base.Set
                                   (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)),
                                 Data.Set.Base.Set
                                   (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)),
                                 Data.Set.Base.Set Text.Megaparsec.Error.Dec)
                                a)
                   (eta2 :: GHC.Base.Maybe
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall b.
                      Text.Megaparsec.Prim.State Data.Text.Internal.Text
                      -> (a
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                      -> (a
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                      -> m b)
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec Data.Text.Internal.Text m a)
                   (\ (tpl :: forall b.
                              Text.Megaparsec.Prim.State Data.Text.Internal.Text
                              -> (a
                                  -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                              -> (a
                                  -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                              -> m b) ->
                    tpl)
                     `cast`
                   (<forall b.
                     Text.Megaparsec.Prim.State Data.Text.Internal.Text
                     -> (a
                         -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                     -> (a
                         -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                     -> m b>_R
                    ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                  <Text.Megaparsec.Error.Dec>_N
                                  <Data.Text.Internal.Text>_N
                                  <m>_R
                                  <a>_R))
                   (\ @ b
                      (s1 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                      (cok :: a
                              -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              -> m b)
                      (ds :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                               Text.Megaparsec.Error.Dec
                             -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b)
                      (ds1 :: a
                              -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              -> m b)
                      (eerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State Data.Text.Internal.Text -> m b) ->
                    case s1 of wild { Text.Megaparsec.Prim.State input ds2 w ->
                    case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                    case (Data.Text.uncons input)
                           `cast`
                         (GHC.Base.Maybe
                            ((,)
                               (Sub (Sym (Text.Megaparsec.Prim.D:R:TokenText0[0])))
                               <Data.Text.Internal.Text>_R)_R)_R of wild2 {
                      GHC.Base.Nothing
                      -> eerr
                           (Text.Megaparsec.Error.ParseError
                              @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              @ Text.Megaparsec.Error.Dec
                              (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                              (Data.Set.Base.Bin
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                                 1#
                                 (Text.Megaparsec.Error.EndOfInput
                                    @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                              (Data.Maybe.maybe
                                 @ (Data.Set.Base.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                                 @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                                 (\ (x :: Text.Megaparsec.Prim.Token
                                            Data.Text.Internal.Text)[OneShot] ->
                                  Data.Set.Base.Bin
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                                    1#
                                    (Text.Megaparsec.Error.Tokens
                                       @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                       (Text.Megaparsec.Prim.nes
                                          @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                          x))
                                    (Data.Set.Base.Tip
                                       @ (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                                    (Data.Set.Base.Tip
                                       @ (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                                 eta2)
                              (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                           wild
                      GHC.Base.Just ds3
                      -> case ds3 of wild3 { (,) c cs ->
                         case eta c of wild4 {
                           Data.Either.Left ds4
                           -> case ds4 of wild5 { (,,) us ps xs ->
                              case GHC.Base.const
                                     @ (Text.Megaparsec.Pos.Pos
                                        -> Text.Megaparsec.Pos.SourcePos
                                        -> GHC.Types.Char
                                        -> (Text.Megaparsec.Pos.SourcePos,
                                            Text.Megaparsec.Pos.SourcePos))
                                     @ (Data.Proxy.Proxy Data.Text.Internal.Text)
                                     Text.Megaparsec.Pos.defaultUpdatePos
                                     (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                                     w
                                     pos
                                     c `cast`
                                     (Sub (Text.Megaparsec.Prim.D:R:TokenText0[0])) of wild6 { (,) apos npos ->
                              case apos of apos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                              eerr
                                (Text.Megaparsec.Error.ParseError
                                   @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                   @ Text.Megaparsec.Error.Dec
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos1 z)
                                   us
                                   ps
                                   xs)
                                (Text.Megaparsec.Prim.State
                                   @ Data.Text.Internal.Text
                                   input
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos1 z)
                                   w) } } }
                           Data.Either.Right x
                           -> case GHC.Base.const
                                     @ (Text.Megaparsec.Pos.Pos
                                        -> Text.Megaparsec.Pos.SourcePos
                                        -> GHC.Types.Char
                                        -> (Text.Megaparsec.Pos.SourcePos,
                                            Text.Megaparsec.Pos.SourcePos))
                                     @ (Data.Proxy.Proxy Data.Text.Internal.Text)
                                     Text.Megaparsec.Pos.defaultUpdatePos
                                     (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                                     w
                                     pos
                                     c `cast`
                                     (Sub (Text.Megaparsec.Prim.D:R:TokenText0[0])) of wild5 { (,) apos npos ->
                              case npos of npos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                              cok
                                x
                                (Text.Megaparsec.Prim.State
                                   @ Data.Text.Internal.Text
                                   cs
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos1 z)
                                   w)
                                (Text.Megaparsec.Prim.$fApplicativeParsecT_$cmempty
                                   @ (Text.Megaparsec.Prim.Token
                                        Data.Text.Internal.Text)) } } } } } } })) -}
06c152ac495b531d4683452395164f32
  $s$fMonadParsecesParsecT_$s$fMonadPlusParsecT ::
    GHC.Base.MonadPlus
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec Data.Text.Internal.Text m)
                  (Text.Megaparsec.Prim.$fMonadPlusParsecT_$cp1MonadPlus
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (ExprParser.$s$fMonadParsecT @ m)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmzero
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmplus
                     @ Text.Megaparsec.Error.Dec
                     @ Data.Text.Internal.Text
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStreamText0) -}
95ea7359076de69973b5531c44967d32
  $sbetween ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      open
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity
         close
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity
         a
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity
         a
  {- Arity: 8,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ open
                   @ close
                   @ a
                   (open1 :: Text.Megaparsec.Prim.ParsecT
                               Text.Megaparsec.Error.Dec
                               Data.Text.Internal.Text
                               Data.Functor.Identity.Identity
                               open)
                   (close1 :: Text.Megaparsec.Prim.ParsecT
                                Text.Megaparsec.Error.Dec
                                Data.Text.Internal.Text
                                Data.Functor.Identity.Identity
                                close)
                   (p :: Text.Megaparsec.Prim.ParsecT
                           Text.Megaparsec.Error.Dec
                           Data.Text.Internal.Text
                           Data.Functor.Identity.Identity
                           a)
                   @ b
                   (eta :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta2 :: a
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: a
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 (Text.Megaparsec.Prim.$fApplicativeParsecT_$c<*
                    @ Text.Megaparsec.Error.Dec
                    @ Data.Text.Internal.Text
                    @ Data.Functor.Identity.Identity
                    Text.Megaparsec.Error.$fErrorComponentDec
                    Text.Megaparsec.Prim.$fStreamText0
                    @ a
                    @ close
                    (Text.Megaparsec.Prim.$fApplicativeParsecT_$c*>
                       @ Text.Megaparsec.Error.Dec
                       @ Data.Text.Internal.Text
                       @ Data.Functor.Identity.Identity
                       Text.Megaparsec.Error.$fErrorComponentDec
                       Text.Megaparsec.Prim.$fStreamText0
                       @ open
                       @ a
                       open1
                       p)
                    close1)
                   `cast`
                 (Text.Megaparsec.Prim.N:ParsecT[0]
                      <Text.Megaparsec.Error.Dec>_N
                      <Data.Text.Internal.Text>_N
                      <Data.Functor.Identity.Identity>_R
                      <a>_R)
                   @ b
                   eta
                   eta2
                   eta3
                   eta4
                   eta5)
                  `cast`
                (forall (open :: <*>_N) (close :: <*>_N) (a :: <*>_N).
                 <Text.Megaparsec.Prim.ParsecT
                    Text.Megaparsec.Error.Dec
                    Data.Text.Internal.Text
                    Data.Functor.Identity.Identity
                    open>_R
                 ->_R <Text.Megaparsec.Prim.ParsecT
                         Text.Megaparsec.Error.Dec
                         Data.Text.Internal.Text
                         Data.Functor.Identity.Identity
                         close>_R
                 ->_R <Text.Megaparsec.Prim.ParsecT
                         Text.Megaparsec.Error.Dec
                         Data.Text.Internal.Text
                         Data.Functor.Identity.Identity
                         a>_R
                 ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                               <Text.Megaparsec.Error.Dec>_N
                               <Data.Text.Internal.Text>_N
                               <Data.Functor.Identity.Identity>_R
                               <a>_R)) -}
6f3c2b1328ead583621181e03f58b70c
  $sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Base.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> ExprParser.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a))
                                  wild2
                             GHC.Types.LT
                             -> ExprParser.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 } } } } } } }) -}
79af68464b8f5a08526eba8071408e8b
  $sfromList1 ::
    Data.Map.Base.Map Data.Text.Internal.Text a1
    -> [(Data.Text.Internal.Text, a1)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
483ed4f8b42f14f868f75e557ce04538
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14560109627051468912##
                   9962255355914938247##
                   ExprParser.$trModule
                   ExprParser.$tc'Add1) -}
a6dc7458078cc7523db201f7554e071d
  $tc'Add1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Add"#) -}
97be47f0eb63a356a579dd7ee59be7bb
  $tc'Binary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16736624287570754130##
                   9459915329304271019##
                   ExprParser.$trModule
                   ExprParser.$tc'Binary1) -}
8fe3224877b4387a304b24338547efb4
  $tc'Binary1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Binary"#) -}
6c65ab5a702f7b788b02a705502a58e5
  $tc'Const :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10154001600172439592##
                   17343701180986375243##
                   ExprParser.$trModule
                   ExprParser.$tc'Const1) -}
cb795ea11af812656b5722288722b2f1
  $tc'Const1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Const"#) -}
3872dd8c3ef4ef9c8aab2e18b99c5ae0
  $tc'Divide :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15871054503105027935##
                   17199824856936384046##
                   ExprParser.$trModule
                   ExprParser.$tc'Divide1) -}
c23e042601f3d47b89ee7109c28dfe8e
  $tc'Divide1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Divide"#) -}
0456a468ef64672a530accb458f29602
  $tc'Eval :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11112302490285473893##
                   9651951344373467146##
                   ExprParser.$trModule
                   ExprParser.$tc'Eval1) -}
bca217ea59bda2c5b3c5c9342b7aaa67
  $tc'Eval1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Eval"#) -}
c7b95a6aa9461ba8864f1b93356bb89a
  $tc'ExpressionInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13490913481785327862##
                   48303356735313372##
                   ExprParser.$trModule
                   ExprParser.$tc'ExpressionInfo1) -}
b2a964ad462acf1bac1dd8f47c27fa95
  $tc'ExpressionInfo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ExpressionInfo"#) -}
c012a3f84ffac8b9c6132913ce55b5a2
  $tc'Multiply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18378506308428491380##
                   12573420443507425537##
                   ExprParser.$trModule
                   ExprParser.$tc'Multiply1) -}
a367733b72279d3b349e808e49889085
  $tc'Multiply1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Multiply"#) -}
bec79ec0e28c3a6fb62920e4d6eb70b4
  $tc'Neg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8263291645770580435##
                   18284474310273973409##
                   ExprParser.$trModule
                   ExprParser.$tc'Neg1) -}
bb461e3f1404a8068324125e53ab8682
  $tc'Neg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Neg"#) -}
6749ba4da14f96605549bc40318935e8
  $tc'Power :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3598376385187712003##
                   6638103032566922676##
                   ExprParser.$trModule
                   ExprParser.$tc'Power1) -}
f4d7ed549c88b7084c38ce530537f033
  $tc'Power1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Power"#) -}
f4d16cdf34927a309f3a4c4585090059
  $tc'PrintAst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5209884537283457844##
                   15126690362929887080##
                   ExprParser.$trModule
                   ExprParser.$tc'PrintAst1) -}
e0acb1d209bd32155eea5a7f1fa8dd24
  $tc'PrintAst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrintAst"#) -}
472d93d1e53c2b6125d554345f2367cf
  $tc'Subtract :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13995778455956096176##
                   8893920535637840276##
                   ExprParser.$trModule
                   ExprParser.$tc'Subtract1) -}
d6a4e3886d0ef52df6969a8f01693a7b
  $tc'Subtract1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Subtract"#) -}
ae0733bfa03b7830b6b4b44207a0c3f8
  $tc'Variable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1522127669826682775##
                   15581332031749129682##
                   ExprParser.$trModule
                   ExprParser.$tc'Variable1) -}
8c8049fa982785ee5f2a4ad04f9ad155
  $tc'Variable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Variable"#) -}
1aeca6128ab53883f852b350e558d892
  $tcBinOperation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12403156312621006680##
                   9807139267780214351##
                   ExprParser.$trModule
                   ExprParser.$tcBinOperation1) -}
974d89b12a52e627fa251b83134b81a9
  $tcBinOperation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BinOperation"#) -}
77f5364aa23c9f1cfad79a97f86a5dc1
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3056386614924979547##
                   10486224140319789381##
                   ExprParser.$trModule
                   ExprParser.$tcExpr1) -}
e13436042e4be80e691abcd27feb5bd2
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Expr"#) -}
2faeabf6c6177c5bb4833f4a0b406a46
  $tcExpressionInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8283127593426443051##
                   7666896888214400017##
                   ExprParser.$trModule
                   ExprParser.$tcExpressionInfo1) -}
74e197c0fa0d800e2a1e784a5eee6e7a
  $tcExpressionInfo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ExpressionInfo"#) -}
582f8cb362f85da3753986e4b30c3a55
  $tcOutput :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15446853021732794485##
                   11227056040184985333##
                   ExprParser.$trModule
                   ExprParser.$tcOutput1) -}
7a3346e522020691f2d135a1328772f2
  $tcOutput1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Output"#) -}
d769193c153168a4135132f8e0067ea6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ExprParser.$trModule2
                   ExprParser.$trModule1) -}
f90c119555108f74182f1822f37f83a8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ExprParser"#) -}
c509cbde6c9beb265fa4fe683ee3bbf7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hw7-0.1.0.0-17DQWlDqMzvGTs6m332wVc"#) -}
ec631afba1bfab280aa0e9c6c09c2e09
  $w$cshowsPrec ::
    ExprParser.BinOperation -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: ExprParser.BinOperation)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   ExprParser.Add
                   -> GHC.Base.++ @ GHC.Types.Char ExprParser.$fShowBinOperation5 w1
                   ExprParser.Subtract
                   -> GHC.Base.++ @ GHC.Types.Char ExprParser.$fShowBinOperation4 w1
                   ExprParser.Multiply
                   -> GHC.Base.++ @ GHC.Types.Char ExprParser.$fShowBinOperation3 w1
                   ExprParser.Divide
                   -> GHC.Base.++ @ GHC.Types.Char ExprParser.$fShowBinOperation2 w1
                   ExprParser.Power
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        ExprParser.$fShowBinOperation1
                        w1 }) -}
b081d932bc4627923ea14353bdf6b5d8
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> ExprParser.Expr -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
635e4dc6b63a8238c1a82b82c5cc4f77
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> ExprParser.Output
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <S,U><L,1*U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: ExprParser.Output)
                   (ww2 :: Data.Text.Internal.Text)
                   (ww3 :: Data.Text.Internal.Text)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       ExprParser.$fShowExpressionInfo9
                       (GHC.Base.++
                          @ GHC.Types.Char
                          ExprParser.$fShowExpressionInfo8
                          (let {
                             eta :: GHC.Base.String
                             = GHC.Base.++
                                 @ GHC.Types.Char
                                 ExprParser.$fShowExpressionInfo7
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    ExprParser.$fShowExpressionInfo6
                                    (case Data.Text.Show.$w$cshowsPrec
                                            ww2
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               ExprParser.$fShowExpressionInfo7
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  ExprParser.$fShowExpressionInfo5
                                                  (case Data.Text.Show.$w$cshowsPrec
                                                          ww3
                                                          (GHC.Base.++
                                                             @ GHC.Types.Char
                                                             ExprParser.$fShowExpressionInfo4
                                                             x) of ww4 { (#,#) ww5 ww6 ->
                                                   GHC.Types.:
                                                     @ GHC.Types.Char
                                                     ww5
                                                     ww6 }))) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Types.: @ GHC.Types.Char ww5 ww6 }))
                           } in
                           case ww1 of wild {
                             ExprParser.Eval
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  ExprParser.$fShowExpressionInfo3
                                  eta
                             ExprParser.PrintAst
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  ExprParser.$fShowExpressionInfo2
                                  eta }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
14b80680cbdd4434de267577566f87fa
  $w$sgo10 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
6e1685239b691ab9ec84b19c195bd556
  $wouter ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
a720427674541abf280da6ec068a7235
  $wouter1 ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
aed0772c0187438e7db2768c6e0e1ed2
  $wp ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> Text.Megaparsec.Pos.Pos
    -> ([GHC.Types.Char]
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 8,
     Strictness: <L,U><L,U><S,U><L,U(U,U,U)><L,U><L,U(U)><L,C(C1(U))><L,C(C1(U))>,
     Inline: [0] -}
3922d795c75b9de9577001031f30ccdf
  $wparseExpression ::
    ExprParser.Output
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: ExprParser.Output)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Data.Text.Internal.Text)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ww of wild {
                   ExprParser.Eval
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case Text.Megaparsec.Prim.$wparseMaybe
                                @ Text.Megaparsec.Error.Dec
                                @ Data.Text.Internal.Text
                                @ ExprParser.Expr
                                Text.Megaparsec.Prim.$fStreamText0
                                ExprParser.exprParser
                                ww1 of wild1 {
                           GHC.Base.Nothing
                           -> case ExprParser.parseExpression2 ret_ty GHC.Base.String of {}
                           GHC.Base.Just v
                           -> case ((ExprParser.eval v)
                                      `cast`
                                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Map.Base.Map
                                            Data.Text.Internal.Text GHC.Integer.Type.Integer>_R
                                         <Data.Functor.Identity.Identity>_R
                                         <GHC.Base.Maybe GHC.Types.Double>_N)
                                      (ExprParser.parsePairs ww2))
                                     `cast`
                                   (Data.Functor.Identity.N:Identity[0]
                                        <GHC.Base.Maybe GHC.Types.Double>_R) of wild2 {
                                GHC.Base.Nothing
                                -> case Data.Maybe.fromJust1 ret_ty GHC.Base.String of {}
                                GHC.Base.Just x
                                -> case x of ww3 { GHC.Types.D# ww4 ->
                                   GHC.Float.$w$sshowSignedFloat
                                     GHC.Float.$fShowDouble_$sshowFloat
                                     GHC.Show.shows22
                                     ww4
                                     (GHC.Types.[] @ GHC.Types.Char) } } })
                        GHC.Types.True
                        w
                   ExprParser.PrintAst
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case Text.Megaparsec.Prim.$wparseMaybe
                                @ Text.Megaparsec.Error.Dec
                                @ Data.Text.Internal.Text
                                @ ExprParser.Expr
                                Text.Megaparsec.Prim.$fStreamText0
                                ExprParser.exprParser
                                ww1 of wild1 {
                           GHC.Base.Nothing
                           -> case ExprParser.parseExpression2 ret_ty GHC.Base.String of {}
                           GHC.Base.Just v
                           -> ExprParser.$w$cshowsPrec1
                                0#
                                v
                                (GHC.Types.[] @ GHC.Types.Char) })
                        GHC.Types.True
                        w }) -}
c03703466aa8b3f8da07eef6de5869c9
  $wparsePair ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((Data.Text.Internal.Text, GHC.Integer.Type.Integer)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> ((Data.Text.Internal.Text, GHC.Integer.Type.Integer)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4,
     Strictness: <L,U><L,C(C1(C1(U)))><L,C(C1(C1(U)))><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w1 :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b) ->
                 let {
                   eerr' :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b
                     {- Arity: 2, Strictness: <L,U><L,A>,
                        Unfolding: InlineRule (2, True, True)
                                   (\ (err :: Text.Megaparsec.Error.ParseError
                                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                                Text.Megaparsec.Error.Dec)
                                      (ds1 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text) ->
                                    w3 err w) -}
                   = \ (err :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                 Text.Megaparsec.Error.Dec)
                       (ds1 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text) ->
                     w3 err w
                 } in
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                   @ Data.Text.Internal.Text
                   ExprParser.pairs6
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <(Data.Text.Internal.Text, GHC.Integer.Type.Integer)>_R))
                   ExprParser.pairs4
                   @ b
                   w
                   w1
                   eerr'
                   w2
                   eerr') -}
e0aa4fd88f261a7d9d393a437159d43a
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Data.Text.Internal.Text a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
4427f7e2d4453e63de43bde8491efaeb
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
ec631afba1bfab280aa0e9c6c09c2e09
  data BinOperation = Add | Subtract | Multiply | Divide | Power
b081d932bc4627923ea14353bdf6b5d8
  data Expr
    = Variable Data.Text.Internal.Text
    | Const GHC.Integer.Type.Integer
    | Neg ExprParser.Expr
    | Binary ExprParser.BinOperation ExprParser.Expr ExprParser.Expr
b73fa27cb08bb732fe3ead47a53dc991
  data ExpressionInfo
    = ExpressionInfo {output :: ExprParser.Output,
                      expr :: Data.Text.Internal.Text,
                      values :: Data.Text.Internal.Text}
20f78f1114eb8e0179406b7811b08e34
  data Output = Eval | PrintAst
1f86296fec755b05efb349b84c9aef53
  einfo :: Options.Applicative.Types.Parser ExprParser.ExpressionInfo
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ ExprParser.ExpressionInfo
                   @ Data.Text.Internal.Text
                   ExprParser.einfo13
                   ExprParser.einfo1) -}
69d993513e264cf5aa6dfab44b9f3b7a
  einfo1 :: Options.Applicative.Types.Parser Data.Text.Internal.Text
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Data.Text.Internal.Text
                   @ GHC.Base.String
                   ExprParser.einfo11
                   ExprParser.einfo2) -}
06037368b52596b3d642b04a85c541b4
  einfo10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "var"#) -}
7fe0bc4b213eb7f67ca42290fc44b984
  einfo11 ::
    Options.Applicative.Types.Parser
      (GHC.Base.String -> Data.Text.Internal.Text)
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ (GHC.Base.String -> Data.Text.Internal.Text)
                   ExprParser.einfo12) -}
619a2eff3b3fe9b299f59c12585bb606
  einfo12 ::
    GHC.Base.Maybe (GHC.Base.String -> Data.Text.Internal.Text)
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Base.String -> Data.Text.Internal.Text)
                   Data.Text.pack) -}
f7189625bde769ab56854d6870f66c04
  einfo13 ::
    Options.Applicative.Types.Parser
      (Data.Text.Internal.Text -> ExprParser.ExpressionInfo)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ (Data.Text.Internal.Text -> ExprParser.ExpressionInfo)
                   @ Data.Text.Internal.Text
                   ExprParser.einfo23
                   ExprParser.einfo14) -}
6d2fc8ab624932860de20c716ac7eb80
  einfo14 :: Options.Applicative.Types.Parser Data.Text.Internal.Text
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Data.Text.Internal.Text
                   @ GHC.Base.String
                   ExprParser.einfo11
                   ExprParser.einfo15) -}
cfd6351ac4019712c127f400ad0bedf4
  einfo15 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Base.String
                   ExprParser.einfo16
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Base.String)) -}
b3c59e043b010a54fbfbef41fb2fa8d4
  einfo16 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Base.String
                   ExprParser.einfo17) -}
49d1fc1b1238b52fb693485f090454cb
  einfo17 :: Options.Applicative.Types.Option GHC.Base.String
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Base.String
                   ExprParser.einfo20
                   ExprParser.einfo18) -}
6c33908929c230024047c47fe203e52b
  einfo18 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   ExprParser.einfo_lvl1
                   ExprParser.einfo_var1
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
4167f061267ed62f917a0edb20e9c1ca
  einfo19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Expression for parsing"#) -}
67a7ed809f0d846c00dd41281f8e397b
  einfo2 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Base.String
                   ExprParser.einfo3
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Base.String)) -}
a1a4c4c2f9616d544c17a78d714b1471
  einfo20 :: Options.Applicative.Types.OptReader GHC.Base.String
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.Base.String
                   ExprParser.einfo21
                   ExprParser.einfo8
                   Options.Applicative.Builder.abortOption3) -}
c5323051212907c1957fdf83c26219a5
  einfo21 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   ExprParser.einfo_n1
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
4e2b371780419fc2033fd64fb5af21e5
  einfo22 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "expr"#) -}
01f39dcb4f5c2e845194a5b2b1f00825
  einfo23 ::
    Options.Applicative.Types.Parser
      (Data.Text.Internal.Text
       -> Data.Text.Internal.Text -> ExprParser.ExpressionInfo)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ ExprParser.Output
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text -> ExprParser.ExpressionInfo)
                   ExprParser.ExpressionInfo
                   ExprParser.einfo24) -}
b102607d38545f2f84d246f1a6de69ae
  einfo24 :: Options.Applicative.Types.Parser ExprParser.Output
  {- Unfolding: (Options.Applicative.Types.AltP
                   @ ExprParser.Output
                   ExprParser.einfo25
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ ExprParser.Output)) -}
b4ad7ea586f75bfd4e9c213afc65f045
  einfo25 :: Options.Applicative.Types.Parser ExprParser.Output
  {- Unfolding: (Options.Applicative.Types.OptP
                   @ ExprParser.Output
                   ExprParser.einfo26) -}
fbce85feb6e7074e812dc8854afcd210
  einfo26 :: Options.Applicative.Types.Option ExprParser.Output
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ ExprParser.Output
                   ExprParser.einfo28
                   ExprParser.einfo27) -}
24d3417de56f7c1a0589f13311538f27
  einfo27 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Options.Applicative.Builder.subparser_var
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
824f2eb26458019a627f809f42ab38b2
  einfo28 :: Options.Applicative.Types.OptReader ExprParser.Output
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.CmdReader
                   @ ExprParser.Output
                   ExprParser.einfo39
                   ExprParser.einfo29) -}
1f9f17a195d5e29b9c52fa75163aa269
  einfo29 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Options.Applicative.Types.ParserInfo ExprParser.Output)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.String) ->
                 GHC.List.lookup
                   @ GHC.Base.String
                   @ (Options.Applicative.Types.ParserInfo ExprParser.Output)
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   ds
                   ExprParser.einfo_cmds) -}
8efdba88883713d6164148018b62ddcb
  einfo3 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Base.String
                   ExprParser.einfo4) -}
763ca4f0e10cbc87b626f0db7b156e4b
  einfo30 ::
    [(GHC.Base.String,
      Options.Applicative.Types.ParserInfo ExprParser.Output)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Options.Applicative.Types.ParserInfo ExprParser.Output)
                   ExprParser.einfo_lvl3
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Options.Applicative.Types.ParserInfo ExprParser.Output))) -}
e811100d91ecfd06d62efb897127a6fe
  einfo31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Evaluate expression"#) -}
5b933d3552a024c4bed75727bd467d66
  einfo32 :: Options.Applicative.Types.Parser ExprParser.Output
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ ExprParser.Output
                   @ ExprParser.Output
                   (Options.Applicative.Extra.helper @ ExprParser.Output)
                   ExprParser.einfo33) -}
ab072c37eb7083b64505e081114ba383
  einfo33 :: Options.Applicative.Types.Parser ExprParser.Output
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ ExprParser.Output
                   ExprParser.einfo34) -}
7415c3236ee445e4b59e83c028edd3fb
  einfo34 :: GHC.Base.Maybe ExprParser.Output
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ ExprParser.Output ExprParser.Eval) -}
81d942318ea8c7ba270ad830b2a5d9b4
  einfo35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Print parsed expression"#) -}
c400941b81b3d77fe17b22e80affce08
  einfo36 :: Options.Applicative.Types.Parser ExprParser.Output
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ ExprParser.Output
                   @ ExprParser.Output
                   (Options.Applicative.Extra.helper @ ExprParser.Output)
                   ExprParser.einfo37) -}
832c31e3edd46fa4375b60b7e578d1ef
  einfo37 :: Options.Applicative.Types.Parser ExprParser.Output
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ ExprParser.Output
                   ExprParser.einfo38) -}
570f69c4821d5b6c1379c7f58e9dfbfb
  einfo38 :: GHC.Base.Maybe ExprParser.Output
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ ExprParser.Output
                   ExprParser.PrintAst) -}
af2565caa0b0eb97f9959f0db051bcec
  einfo39 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Base.map
                   @ (GHC.Base.String,
                      Options.Applicative.Types.ParserInfo ExprParser.Output)
                   @ [GHC.Types.Char]
                   (Data.Tuple.fst
                      @ GHC.Base.String
                      @ (Options.Applicative.Types.ParserInfo ExprParser.Output))
                   ExprParser.einfo_cmds) -}
999df35e9a5f5e376176ff8e254702ad
  einfo4 :: Options.Applicative.Types.Option GHC.Base.String
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Base.String
                   ExprParser.einfo7
                   ExprParser.einfo5) -}
2e660082477e891287bf5237ddb46f1a
  einfo5 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   ExprParser.einfo_lvl2
                   ExprParser.einfo_var
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
13b415d5707b14e8d036d1946c1da5fd
  einfo6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Values for the expression"#) -}
e0a70b9e43a0f9fd54f4c5e2f5588211
  einfo7 :: Options.Applicative.Types.OptReader GHC.Base.String
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.Base.String
                   ExprParser.einfo9
                   ExprParser.einfo8
                   Options.Applicative.Builder.abortOption3) -}
5a62cc62b561240ef6bcd79e81796a45
  einfo8 :: Options.Applicative.Types.CReader GHC.Base.String
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ GHC.Base.String
                   Options.Applicative.Types.$fMonoidCompleter4
                     `cast`
                   (Trans
                        (<GHC.Base.String>_R
                         ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R))
                        (Sym (Options.Applicative.Types.N:Completer[0])))
                   (Data.Either.Right
                      @ Options.Applicative.Types.ParseError
                      @ GHC.Base.String)
                     `cast`
                   (Trans
                        (<GHC.Base.String>_R
                         ->_R Trans
                                  (Sym (Data.Functor.Identity.N:Identity[0]
                                            <Data.Either.Either
                                               Options.Applicative.Types.ParseError
                                               GHC.Base.String>_R))
                                  (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Options.Applicative.Types.ParseError>_N
                                            <Data.Functor.Identity.Identity>_R
                                            <GHC.Base.String>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <GHC.Base.String>_R
                                       <Control.Monad.Trans.Except.Except
                                          Options.Applicative.Types.ParseError>_R
                                       <GHC.Base.String>_N))
                             (Sym (Options.Applicative.Types.N:ReadM[0]) <GHC.Base.String>_N)))) -}
249e576148c26568bce4fcfbc5ffbbd3
  einfo9 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   ExprParser.einfo_n
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
8e7580aa1119b4c5fc420fe27544792b
  einfo_cmd :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "eval"#) -}
4d7bf09d821b0a3e9fe012059c5921fe
  einfo_cmd1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "print-ast"#) -}
dd789b908d09004e463d39c92575b098
  einfo_cmds ::
    [(GHC.Base.String,
      Options.Applicative.Types.ParserInfo ExprParser.Output)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Options.Applicative.Types.ParserInfo ExprParser.Output)
                   ExprParser.einfo_lvl5
                   ExprParser.einfo30) -}
70d6fe22a1de8c4615d09f0c48c856cf
  einfo_lvl1 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   ExprParser.einfo19) -}
eb361bd483fd705c9d7096df5a9d6917
  einfo_lvl2 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   ExprParser.einfo6) -}
71210e7e713cb7666b5969712b4648ca
  einfo_lvl3 ::
    (GHC.Base.String,
     Options.Applicative.Types.ParserInfo ExprParser.Output)
  {- Strictness: m,
     Unfolding: ((ExprParser.einfo_cmd, ExprParser.einfo_pinfo)) -}
54a45c46c5438425fc794c58fe2cc85a
  einfo_lvl4 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   ExprParser.einfo31) -}
7d6839d174bff78e23e1a3f859167cb9
  einfo_lvl5 ::
    (GHC.Base.String,
     Options.Applicative.Types.ParserInfo ExprParser.Output)
  {- Strictness: m,
     Unfolding: ((ExprParser.einfo_cmd1, ExprParser.einfo_pinfo1)) -}
674ec28f36f3685b16dab8195f27464a
  einfo_lvl6 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   ExprParser.einfo35) -}
86235feb99744f9b97ed03faf4ff0b2c
  einfo_n :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   ExprParser.einfo10) -}
1a8baf7be612eba611367e6b4078f0b9
  einfo_n1 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   ExprParser.einfo22) -}
d4b0bc2f7f61542d7907b28461edd02f
  einfo_pinfo ::
    Options.Applicative.Types.ParserInfo ExprParser.Output
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.ParserInfo
                   @ ExprParser.Output
                   ExprParser.einfo32
                   GHC.Types.True
                   ExprParser.einfo_lvl4
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Options.Applicative.Builder.info1
                   GHC.Types.True) -}
bb03b0964ec0706c982055a57b173a27
  einfo_pinfo1 ::
    Options.Applicative.Types.ParserInfo ExprParser.Output
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.ParserInfo
                   @ ExprParser.Output
                   ExprParser.einfo36
                   GHC.Types.True
                   ExprParser.einfo_lvl6
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Options.Applicative.Builder.info1
                   GHC.Types.True) -}
fe2cbc434800292a56706a5a0c28ec80
  einfo_var :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "VALUES"#) -}
029feb58cb5df5edac54943624c6b435
  einfo_var1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "EXPRESSION"#) -}
81b841dd1668121e5d7eb6d599a19c8b
  eval ::
    ExprParser.Expr
    -> Control.Monad.Trans.Reader.Reader
         (Data.Map.Base.Map
            Data.Text.Internal.Text GHC.Integer.Type.Integer)
         (GHC.Base.Maybe GHC.Types.Double)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
bd68363e39f3a25187c8092951367299
  expr :: ExprParser.ExpressionInfo -> Data.Text.Internal.Text
  RecSel Left ExprParser.ExpressionInfo
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ExprParser.ExpressionInfo) ->
                 case ds of wild { ExprParser.ExpressionInfo ds1 ds2 ds3 ->
                 ds2 }) -}
2ea38042fd9a8a0bcd3f8ec1665fd23a
  exprParser :: Text.Megaparsec.Text.Parser ExprParser.Expr
  {- Unfolding: (Text.Megaparsec.Expr.makeExprParser
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   @ ExprParser.Expr
                   (ExprParser.$s$fMonadParsecesParsecT
                      @ Data.Functor.Identity.Identity)
                   ExprParser.exprParser1
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr>_R))
                   ExprParser.operators) -}
ba512c809669e19188abec091b7c554b
  exprParser1 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> (ExprParser.Expr
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> (ExprParser.Expr
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(C1(U))> -}
a5ffea919941d98e36bdc4ece485a3e6
  identifier :: Text.Megaparsec.Text.Parser Data.Text.Internal.Text
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ExprParser.identifier1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <Data.Text.Internal.Text>_N
                          <Data.Functor.Identity.Identity>_R
                          <Data.Text.Internal.Text>_R)) -}
9ed03378ad0f5e675ba5dd0fa67cae72
  identifier1 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> (Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> (Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (cok :: Data.Text.Internal.Text
                           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Data.Text.Internal.Text
                           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ [GHC.Types.Char]
                   @ ()
                   ExprParser.identifier3
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   ExprParser.sc
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) ->
                    cok
                      (case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.Text.Internal.Text
                              (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      8#
                                      s2 of ds1 { (#,#) ipv ipv1 ->
                               ExprParser.$wouter1
                                 (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                                 ExprParser.identifier2
                                 x
                                 0#
                                 ipv }) of ds1 { (#,#) ipv ipv1 ->
                       ipv1 }))
                   cerr
                   (\ (x :: GHC.Base.String) ->
                    eok
                      (case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.Text.Internal.Text
                              (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      8#
                                      s2 of ds1 { (#,#) ipv ipv1 ->
                               ExprParser.$wouter
                                 (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                                 ExprParser.identifier2
                                 x
                                 0#
                                 ipv }) of ds1 { (#,#) ipv ipv1 ->
                       ipv1 }))
                   eerr) -}
db5ef7ea8857b31233f903fa65b9b4f8
  identifier2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
d54091b2829efc45914c6bd4496df627
  identifier3 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ([GHC.Types.Char]
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(S(LLS)SL),1*U(U(U,U,U),U(U(U,U,U),U),U(U))><L,C(C1(U))><L,A><L,A><L,C(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w1 :: [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Megaparsec.Prim.State ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case ww2 of ww8 { Data.List.NonEmpty.:| ww9 ww10 ->
                 ExprParser.$wp @ b ww5 ww6 ww7 ww9 ww10 ww3 w1 w4 } } }) -}
c81edef037dd46e55925eb43a7e8e9d1
  integer :: Text.Megaparsec.Text.Parser GHC.Integer.Type.Integer
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ExprParser.integer1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <Data.Text.Internal.Text>_N
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Integer.Type.Integer>_R)) -}
fd52e26f50247cff9e73c5fb2af622ac
  integer1 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> (GHC.Integer.Type.Integer
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Integer.Type.Integer
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: GHC.Integer.Type.Integer
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: GHC.Integer.Type.Integer
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ GHC.Integer.Type.Integer
                   @ ()
                   ExprParser.integer2
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Integer.Type.Integer>_R))
                   ExprParser.sc
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
7fa622501e01e8246b49c4e93cdc11c7
  integer2 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> (GHC.Integer.Type.Integer
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Integer.Type.Integer
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (cok :: GHC.Integer.Type.Integer
                           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eok :: GHC.Integer.Type.Integer
                           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 ExprParser.integer_p
                   `cast`
                 (Text.Megaparsec.Prim.N:ParsecT[0]
                      <Text.Megaparsec.Error.Dec>_N
                      <Data.Text.Internal.Text>_N
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b
                   s1
                   (\ (x :: GHC.Integer.Type.Integer)
                      (s' :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                      (hs :: Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)) ->
                    cok
                      x
                      s'
                      (case hs
                              `cast`
                            (Text.Megaparsec.Prim.N:Hints[0]
                                 <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N) of wild {
                         []
                         -> (GHC.Types.[]
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                              `cast`
                            (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                      <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N))
                         : ds2 xs
                         -> case ExprParser.integer_cl1 of wild1 {
                              GHC.Base.Nothing
                              -> case xs of wild2 {
                                   []
                                   -> (GHC.Types.[]
                                         @ (Data.Set.Base.Set
                                              (Text.Megaparsec.Error.ErrorItem
                                                 (Text.Megaparsec.Prim.Token
                                                    Data.Text.Internal.Text))))
                                        `cast`
                                      (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                <Text.Megaparsec.Prim.Token
                                                   Data.Text.Internal.Text>_N))
                                   : ds1 xs1
                                   -> case ExprParser.integer_cl of wild3 {
                                        GHC.Base.Nothing
                                        -> xs1
                                             `cast`
                                           (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                     <Text.Megaparsec.Prim.Token
                                                        Data.Text.Internal.Text>_N))
                                        GHC.Base.Just m
                                        -> (GHC.Types.:
                                              @ (Data.Set.Base.Set
                                                   (Text.Megaparsec.Error.ErrorItem
                                                      (Text.Megaparsec.Prim.Token
                                                         Data.Text.Internal.Text)))
                                              (Data.Set.Base.singleton
                                                 @ (Text.Megaparsec.Error.ErrorItem
                                                      (Text.Megaparsec.Prim.Token
                                                         Data.Text.Internal.Text))
                                                 m)
                                              xs1)
                                             `cast`
                                           (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                     <Text.Megaparsec.Prim.Token
                                                        Data.Text.Internal.Text>_N)) } }
                              GHC.Base.Just m
                              -> case ExprParser.integer_cl of wild2 {
                                   GHC.Base.Nothing
                                   -> xs
                                        `cast`
                                      (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                <Text.Megaparsec.Prim.Token
                                                   Data.Text.Internal.Text>_N))
                                   GHC.Base.Just m1
                                   -> (GHC.Types.:
                                         @ (Data.Set.Base.Set
                                              (Text.Megaparsec.Error.ErrorItem
                                                 (Text.Megaparsec.Prim.Token
                                                    Data.Text.Internal.Text)))
                                         (Data.Set.Base.singleton
                                            @ (Text.Megaparsec.Error.ErrorItem
                                                 (Text.Megaparsec.Prim.Token
                                                    Data.Text.Internal.Text))
                                            m1)
                                         xs)
                                        `cast`
                                      (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                <Text.Megaparsec.Prim.Token
                                                   Data.Text.Internal.Text>_N)) } } }))
                   cerr
                   (\ (x :: GHC.Integer.Type.Integer)
                      (s' :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                      (hs :: Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)) ->
                    eok
                      x
                      s'
                      (case hs
                              `cast`
                            (Text.Megaparsec.Prim.N:Hints[0]
                                 <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N) of wild {
                         []
                         -> (GHC.Types.[]
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                              `cast`
                            (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                      <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N))
                         : ds2 xs
                         -> case Text.Megaparsec.Lexer.decimal6 of wild1 {
                              []
                              -> case xs of wild2 {
                                   []
                                   -> (GHC.Types.[]
                                         @ (Data.Set.Base.Set
                                              (Text.Megaparsec.Error.ErrorItem
                                                 (Text.Megaparsec.Prim.Token
                                                    Data.Text.Internal.Text))))
                                        `cast`
                                      (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                <Text.Megaparsec.Prim.Token
                                                   Data.Text.Internal.Text>_N))
                                   : ds1 xs1
                                   -> case ExprParser.integer_el of wild3 {
                                        GHC.Base.Nothing
                                        -> xs1
                                             `cast`
                                           (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                     <Text.Megaparsec.Prim.Token
                                                        Data.Text.Internal.Text>_N))
                                        GHC.Base.Just m
                                        -> (GHC.Types.:
                                              @ (Data.Set.Base.Set
                                                   (Text.Megaparsec.Error.ErrorItem
                                                      (Text.Megaparsec.Prim.Token
                                                         Data.Text.Internal.Text)))
                                              (Data.Set.Base.singleton
                                                 @ (Text.Megaparsec.Error.ErrorItem
                                                      (Text.Megaparsec.Prim.Token
                                                         Data.Text.Internal.Text))
                                                 m)
                                              xs1)
                                             `cast`
                                           (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                     <Text.Megaparsec.Prim.Token
                                                        Data.Text.Internal.Text>_N)) } }
                              : a1 as
                              -> case ExprParser.integer_el of wild2 {
                                   GHC.Base.Nothing
                                   -> xs
                                        `cast`
                                      (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                <Text.Megaparsec.Prim.Token
                                                   Data.Text.Internal.Text>_N))
                                   GHC.Base.Just m
                                   -> (GHC.Types.:
                                         @ (Data.Set.Base.Set
                                              (Text.Megaparsec.Error.ErrorItem
                                                 (Text.Megaparsec.Prim.Token
                                                    Data.Text.Internal.Text)))
                                         (Data.Set.Base.singleton
                                            @ (Text.Megaparsec.Error.ErrorItem
                                                 (Text.Megaparsec.Prim.Token
                                                    Data.Text.Internal.Text))
                                            m)
                                         xs)
                                        `cast`
                                      (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                                <Text.Megaparsec.Prim.Token
                                                   Data.Text.Internal.Text>_N)) } } }))
                   (\ (err :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                Text.Megaparsec.Error.Dec) ->
                    eerr
                      (case err of wild { Text.Megaparsec.Error.ParseError ds ds1 ds2 ds3 ->
                       Text.Megaparsec.Error.ParseError
                         @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         @ Text.Megaparsec.Error.Dec
                         ds
                         ds1
                         ExprParser.integer3
                         ds3 }))) -}
c5ad81aa5411d3bd2c36ec47498c34c1
  integer3 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
  {- Unfolding: (case ExprParser.integer_el of wild {
                   GHC.Base.Nothing
                   -> Data.Set.Base.Tip
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                   GHC.Base.Just x
                   -> case x of dt { DEFAULT ->
                      Data.Set.Base.Bin
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                        1#
                        dt
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))) } }) -}
c3f755a4e478175a4c428a2d075c2a19
  integer4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "est of "#) -}
e91dcf89c67b83e3725eb76070deb5e2
  integer5 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'r'#) -}
ac43655fc31f1983fdb7193318664a9e
  integer6 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> (GHC.Types.Char
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (s1 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (cok :: GHC.Types.Char
                           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eok :: GHC.Types.Char
                           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Prim.Hints
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 case s1 of wild { Text.Megaparsec.Prim.State input ds2 w ->
                 case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                 case input of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt2 0#) of wild3 {
                   GHC.Types.False
                   -> case GHC.Prim.indexWord16Array# dt dt1 of r# { DEFAULT ->
                      let {
                        $w$j :: GHC.Prim.Char#
                                -> Data.Text.Internal.Text -> Data.Functor.Identity.Identity b
                          {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Char#)[OneShot]
                            (w1 :: Data.Text.Internal.Text)[OneShot] ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.leWord#
                                    (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# ww) 48#))
                                    9##) of wild4 {
                            GHC.Types.False
                            -> case pos of ww1 { Text.Megaparsec.Pos.SourcePos ww2 ww3 ww4 ->
                               eerr
                                 (Text.Megaparsec.Error.ParseError
                                    @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                                    @ Text.Megaparsec.Error.Dec
                                    wild1
                                    (Data.Set.Base.Bin
                                       @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)
                                       1#
                                       (Text.Megaparsec.Error.Tokens
                                          @ GHC.Types.Char
                                          (Data.List.NonEmpty.:|
                                             @ GHC.Types.Char
                                             (GHC.Types.C# ww)
                                             (GHC.Types.[] @ GHC.Types.Char)))
                                       (Data.Set.Base.Tip
                                          @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char))
                                       (Data.Set.Base.Tip
                                          @ (Text.Megaparsec.Error.ErrorItem GHC.Types.Char)))
                                      `cast`
                                    (Data.Set.Base.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Sym (Text.Megaparsec.Prim.D:R:TokenText0[0])))_N)_R
                                    ExprParser.integer8
                                    (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                                 wild }
                            GHC.Types.True
                            -> case pos of ww1 { Text.Megaparsec.Pos.SourcePos ww2 ww3 ww4 ->
                               case case ww of ds1 {
                                      DEFAULT
                                      -> Text.Megaparsec.Pos.SourcePos
                                           ww2
                                           ww3
                                           (GHC.Prim.plusWord# ww4 1##)
                                      '\t'#
                                      -> case w `cast`
                                              (UnsafeCo representational Text.Megaparsec.Pos.Pos GHC.Types.Word) of wild5 { GHC.Types.W# y# ->
                                         case y# of wild6 {
                                           DEFAULT
                                           -> case GHC.Prim.remWord#
                                                     (GHC.Prim.minusWord# ww4 1##)
                                                     wild6 of wild7 { DEFAULT ->
                                              let {
                                                x :: GHC.Prim.Word#
                                                = GHC.Prim.minusWord#
                                                    (GHC.Prim.plusWord# ww4 wild6)
                                                    wild7
                                              } in
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.ltWord# x 1##) of wild8 {
                                                GHC.Types.False
                                                -> Text.Megaparsec.Pos.SourcePos ww2 ww3 x
                                                GHC.Types.True
                                                -> case Text.Megaparsec.Pos.$fArbitraryPos2
                                                   ret_ty Text.Megaparsec.Pos.SourcePos
                                                   of {} } }
                                           0##
                                           -> case GHC.Real.divZeroError
                                              ret_ty Text.Megaparsec.Pos.SourcePos
                                              of {} } }
                                      '\n'#
                                      -> Text.Megaparsec.Pos.SourcePos
                                           ww2
                                           (GHC.Prim.plusWord# ww3 1##)
                                           1## } of npos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                               cok
                                 (GHC.Types.C# ww)
                                 (Text.Megaparsec.Prim.State
                                    @ Data.Text.Internal.Text
                                    w1
                                    (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos1 z)
                                    w)
                                 (GHC.Types.[]
                                    @ (Data.Set.Base.Set
                                         (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                                   `cast`
                                 (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                           <Text.Megaparsec.Prim.Token
                                              Data.Text.Internal.Text>_N)) } } }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.ltWord# r# 55296##) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.gtWord# r# 56319##) of wild5 {
                             GHC.Types.False
                             -> case GHC.Prim.indexWord16Array#
                                       dt
                                       (GHC.Prim.+# dt1 1#) of r#1 { DEFAULT ->
                                $w$j
                                  (GHC.Prim.chr#
                                     (GHC.Prim.+#
                                        (GHC.Prim.+#
                                           (GHC.Prim.uncheckedIShiftL#
                                              (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                              10#)
                                           (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                        65536#))
                                  (case GHC.Prim.-# dt2 2# of wild6 {
                                     DEFAULT
                                     -> Data.Text.Internal.Text dt (GHC.Prim.+# dt1 2#) wild6
                                     0# -> Data.Text.Internal.empty }) }
                             GHC.Types.True
                             -> $w$j
                                  (GHC.Prim.chr# (GHC.Prim.word2Int# r#))
                                  (case GHC.Prim.-# dt2 1# of wild6 {
                                     DEFAULT
                                     -> Data.Text.Internal.Text dt (GHC.Prim.+# dt1 1#) wild6
                                     0# -> Data.Text.Internal.empty }) }
                        GHC.Types.True
                        -> $w$j
                             (GHC.Prim.chr# (GHC.Prim.word2Int# r#))
                             (case GHC.Prim.-# dt2 1# of wild5 {
                                DEFAULT -> Data.Text.Internal.Text dt (GHC.Prim.+# dt1 1#) wild5
                                0# -> Data.Text.Internal.empty }) } }
                   GHC.Types.True
                   -> eerr
                        (Text.Megaparsec.Error.ParseError
                           @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           @ Text.Megaparsec.Error.Dec
                           wild1
                           ExprParser.integer7
                           ExprParser.integer8
                           (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                        wild } } } }) -}
f92333f8ffe4cdce1fb032d782100dbf
  integer7 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
  {- HasNoCafRefs,
     Unfolding: (Data.Set.Base.Bin
                   @ (Text.Megaparsec.Error.ErrorItem
                        (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                   1#
                   (Text.Megaparsec.Error.EndOfInput
                      @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                   (Data.Set.Base.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                   (Data.Set.Base.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))) -}
3f9443fa7f2dd7a4f7f83abd115d5e89
  integer8 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
  {- Unfolding: (case Text.Megaparsec.Lexer.decimal2 of wild {
                   []
                   -> Data.Set.Base.Tip
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                   : a1 as
                   -> Data.Set.Base.Bin
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                        1#
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)))
                        (Data.Set.Base.Tip
                           @ (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))) }) -}
47eff2c530d1c5fbcac02a343f2d95b0
  integer_cl ::
    GHC.Base.Maybe
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
  {- Unfolding: (case Text.Megaparsec.Lexer.integer1 of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                   : a1 as
                   -> GHC.Base.Just
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           (Data.List.NonEmpty.:|
                              @ GHC.Types.Char
                              ExprParser.integer5
                              (GHC.Base.++ @ GHC.Types.Char ExprParser.integer4 wild))) }) -}
890251d53276ecfe53aa63847f739d69
  integer_cl1 ::
    GHC.Base.Maybe
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
  {- Unfolding: (case Text.Megaparsec.Lexer.decimal6 of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                   : a1 as
                   -> GHC.Base.Just
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           (Data.List.NonEmpty.:|
                              @ GHC.Types.Char
                              ExprParser.integer5
                              (GHC.Base.++ @ GHC.Types.Char ExprParser.integer4 wild))) }) -}
7f450aa79cb8db978dc98ce7bedc4166
  integer_el ::
    GHC.Base.Maybe
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
  {- Unfolding: (case Text.Megaparsec.Lexer.integer1 of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                   : a1 as
                   -> GHC.Base.Just
                        @ (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))
                        (Text.Megaparsec.Error.Label
                           @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                           (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as)) }) -}
2f0b646b58ae585bdd2bb9eb5b083f1a
  integer_p ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      GHC.Integer.Type.Integer
  {- Unfolding: (Text.Megaparsec.Lexer.nump
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   (ExprParser.$s$fMonadParsecesParsecT
                      @ Data.Functor.Identity.Identity)
                   (GHC.Types.[] @ GHC.Types.Char)
                   ExprParser.integer6
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))) -}
491924d757081cdd1ff738b6004c6e62
  lexeme ::
    Text.Megaparsec.Text.Parser a -> Text.Megaparsec.Text.Parser a
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ExprParser.lexeme1
                  `cast`
                (forall (a :: <*>_N).
                 <Text.Megaparsec.Prim.ParsecT
                    Text.Megaparsec.Error.Dec
                    Data.Text.Internal.Text
                    Data.Functor.Identity.Identity
                    a>_R
                 ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                               <Text.Megaparsec.Error.Dec>_N
                               <Data.Text.Internal.Text>_N
                               <Data.Functor.Identity.Identity>_R
                               <a>_R)) -}
5ec30c7245ca2020a2d49415b73b6ddd
  lexeme1 ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      a
    -> forall b1.
       Text.Megaparsec.Prim.State Data.Text.Internal.Text
       -> (a
           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
           -> Data.Functor.Identity.Identity b1)
       -> (a
           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
           -> Text.Megaparsec.Prim.Hints
                (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
             Text.Megaparsec.Error.Dec
           -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   (eta3 :: Text.Megaparsec.Prim.ParsecT
                              Text.Megaparsec.Error.Dec
                              Data.Text.Internal.Text
                              Data.Functor.Identity.Identity
                              a)
                   @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: a
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: a
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ a
                   @ ()
                   eta3
                   ExprParser.sc
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
5ad7626aa2b464980dac8af6dace594d
  operators ::
    [[Text.Megaparsec.Expr.Operator
        Text.Megaparsec.Text.Parser ExprParser.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr]
                   ExprParser.operators34
                   ExprParser.operators1) -}
847da47376128768dec2c6b5d0de510a
  operators1 ::
    [[Text.Megaparsec.Expr.Operator
        Text.Megaparsec.Text.Parser ExprParser.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr]
                   ExprParser.operators28
                   ExprParser.operators2) -}
cb43bfd6f98148c0a91f56975ac4aff0
  operators10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "-"#) -}
9a1bed3fcc95632adfce7a1e2699e68d
  operators11 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity)
      ExprParser.Expr
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Expr.InfixL
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   @ ExprParser.Expr
                   ExprParser.operators12
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))) -}
a877aab52c821d6bb6b1452b0ed7def5
  operators12 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ Data.Text.Internal.Text
                   @ (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                   ExprParser.operators14
                   ExprParser.operators13
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
a1a91b543e5d5f15c53f31d840ad954d
  operators13 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (eta2 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta3 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 eta5
                   ExprParser.operators_eta1
                   eta2
                   (GHC.Types.[]
                      @ (Data.Set.Base.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:Hints[0]
                             <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N))) -}
7b17814c708fb12f8cf913656ddc87a1
  operators14 :: Text.Megaparsec.Text.Parser Data.Text.Internal.Text
  {- Unfolding: (ExprParser.symbol ExprParser.operators15) -}
136268f9a826afc3e116ec9c1a771530
  operators15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "+"#) -}
318523ba9236fa8fc2ae260d785bfe34
  operators16 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.Text.Parser ExprParser.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr)
                   ExprParser.operators23
                   ExprParser.operators17) -}
736165777a2cc36c774d4a85b8b9ac8e
  operators17 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.Text.Parser ExprParser.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr)
                   ExprParser.operators18
                   (GHC.Types.[]
                      @ (Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.Text.Parser ExprParser.Expr))) -}
c8bb10b03df9dc0593ab923b298402e6
  operators18 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity)
      ExprParser.Expr
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Expr.InfixL
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   @ ExprParser.Expr
                   ExprParser.operators19
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))) -}
73899a1d576b1148a5ae1e675a7e17df
  operators19 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ Data.Text.Internal.Text
                   @ (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                   ExprParser.operators21
                   ExprParser.operators20
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
2e32aecd64654ee1486bb13b32a1b69d
  operators2 ::
    [[Text.Megaparsec.Expr.Operator
        Text.Megaparsec.Text.Parser ExprParser.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr]
                   ExprParser.operators16
                   ExprParser.operators3) -}
a35d0da53d14e852ac2634b61a0662ca
  operators20 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (eta2 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta3 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 eta5
                   ExprParser.operators_eta2
                   eta2
                   (GHC.Types.[]
                      @ (Data.Set.Base.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:Hints[0]
                             <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N))) -}
936fdcafb2b96b57863efe5d7382c9f2
  operators21 :: Text.Megaparsec.Text.Parser Data.Text.Internal.Text
  {- Unfolding: (ExprParser.symbol ExprParser.operators22) -}
b4ef7001902663f4077fef1350b57613
  operators22 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "/"#) -}
ee84c28145400111cdf757a68f0d509a
  operators23 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity)
      ExprParser.Expr
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Expr.InfixL
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   @ ExprParser.Expr
                   ExprParser.operators24
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))) -}
85556400315e182b770d95cb396b5338
  operators24 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ Data.Text.Internal.Text
                   @ (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                   ExprParser.operators26
                   ExprParser.operators25
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
ec027385d6f5da46466cafbfdff1c076
  operators25 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (eta2 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta3 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 eta5
                   ExprParser.operators_eta3
                   eta2
                   (GHC.Types.[]
                      @ (Data.Set.Base.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:Hints[0]
                             <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N))) -}
c686e06309b1a82146993bcfc8bf3605
  operators26 :: Text.Megaparsec.Text.Parser Data.Text.Internal.Text
  {- Unfolding: (ExprParser.symbol ExprParser.operators27) -}
cab65a143cd1d3ea4bf35be18b690c55
  operators27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "*"#) -}
46f8ebee8737dc6cb6f4225bd4711a7b
  operators28 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.Text.Parser ExprParser.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr)
                   ExprParser.operators29
                   (GHC.Types.[]
                      @ (Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.Text.Parser ExprParser.Expr))) -}
25df45ed5599c3abe0a2628c2e3a8173
  operators29 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity)
      ExprParser.Expr
  {- Strictness: m3,
     Unfolding: (Text.Megaparsec.Expr.InfixR
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   @ ExprParser.Expr
                   ExprParser.operators30
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))) -}
e55aef1b7941e6799552db4db1a8de01
  operators3 ::
    [[Text.Megaparsec.Expr.Operator
        Text.Megaparsec.Text.Parser ExprParser.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr]
                   ExprParser.operators4
                   (GHC.Types.[]
                      @ [Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.Text.Parser ExprParser.Expr])) -}
6570ab833d90396cab5c63099598e62a
  operators30 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ Data.Text.Internal.Text
                   @ (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                   ExprParser.operators32
                   ExprParser.operators31
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
d1124987d431faf063df2e1dfb489b77
  operators31 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (eta2 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta3 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 eta5
                   ExprParser.operators_eta4
                   eta2
                   (GHC.Types.[]
                      @ (Data.Set.Base.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:Hints[0]
                             <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N))) -}
4be79c76aeb593f90faff6b1ced431f4
  operators32 :: Text.Megaparsec.Text.Parser Data.Text.Internal.Text
  {- Unfolding: (ExprParser.symbol ExprParser.operators33) -}
90c6fdcf545e892092252a70bb956b60
  operators33 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "^"#) -}
458953e095b5f2dd1cc64ab4457a979f
  operators34 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.Text.Parser ExprParser.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr)
                   ExprParser.operators35
                   (GHC.Types.[]
                      @ (Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.Text.Parser ExprParser.Expr))) -}
50df74f5f6b8c3c30cbf7d6b5891efd2
  operators35 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity)
      ExprParser.Expr
  {- Strictness: m4,
     Unfolding: (Text.Megaparsec.Expr.Prefix
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   @ ExprParser.Expr
                   ExprParser.operators36
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr>_R))) -}
57f85f0fe5b65e6bb69c5630ea0b8dd0
  operators36 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: (ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: (ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ Data.Text.Internal.Text
                   @ (ExprParser.Expr -> ExprParser.Expr)
                   ExprParser.operators9
                   ExprParser.operators37
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
47403f0b5f12cd782ec4b8000c5790bc
  operators37 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> ((ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (eta2 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta3 :: (ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: (ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 eta5
                   ExprParser.Neg
                   eta2
                   (GHC.Types.[]
                      @ (Data.Set.Base.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:Hints[0]
                             <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N))) -}
97566605ef6edfbfbdc74955920e2853
  operators4 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.Text.Parser ExprParser.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr)
                   ExprParser.operators11
                   ExprParser.operators5) -}
4981e08930f05654c56d5828dd16f0fa
  operators5 ::
    [Text.Megaparsec.Expr.Operator
       Text.Megaparsec.Text.Parser ExprParser.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.Megaparsec.Expr.Operator
                        Text.Megaparsec.Text.Parser ExprParser.Expr)
                   ExprParser.operators6
                   (GHC.Types.[]
                      @ (Text.Megaparsec.Expr.Operator
                           Text.Megaparsec.Text.Parser ExprParser.Expr))) -}
99f63779219e9c37f58124c87350a1f7
  operators6 ::
    Text.Megaparsec.Expr.Operator
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec
         Data.Text.Internal.Text
         Data.Functor.Identity.Identity)
      ExprParser.Expr
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Expr.InfixL
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   @ ExprParser.Expr
                   ExprParser.operators7
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))) -}
9569fbb0e6d4addfd6ca51d6f3c309b9
  operators7 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ Data.Text.Internal.Text
                   @ (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                   ExprParser.operators9
                   ExprParser.operators8
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
a02aaa167ee51a74757c8cce44175e94
  operators8 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> ((ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (eta2 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta3 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: (ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b) ->
                 eta5
                   ExprParser.operators_eta
                   eta2
                   (GHC.Types.[]
                      @ (Data.Set.Base.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))))
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:Hints[0]
                             <Text.Megaparsec.Prim.Token Data.Text.Internal.Text>_N))) -}
b5ecb11e3b4c1b62df5d8e786365dfc4
  operators9 :: Text.Megaparsec.Text.Parser Data.Text.Internal.Text
  {- Unfolding: (ExprParser.symbol ExprParser.operators10) -}
4506f0e82fb15014d891da14032c099b
  operators_eta ::
    ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (ExprParser.Binary ExprParser.Subtract) -}
861f75eacaa66971532d3ec254f6c740
  operators_eta1 ::
    ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (ExprParser.Binary ExprParser.Add) -}
c73c210bd98085cd4f3ae11ae58571f3
  operators_eta2 ::
    ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (ExprParser.Binary ExprParser.Divide) -}
e572a66ae18b8159efba03ae0860af2b
  operators_eta3 ::
    ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (ExprParser.Binary ExprParser.Multiply) -}
9986737ef0352db1f89a96036449a7e4
  operators_eta4 ::
    ExprParser.Expr -> ExprParser.Expr -> ExprParser.Expr
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (ExprParser.Binary ExprParser.Power) -}
9d051272f82145f4988c13bb016878a1
  output :: ExprParser.ExpressionInfo -> ExprParser.Output
  RecSel Left ExprParser.ExpressionInfo
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ExprParser.ExpressionInfo) ->
                 case ds of wild { ExprParser.ExpressionInfo ds1 ds2 ds3 ->
                 ds1 }) -}
efc26bc76b454bbc9642f1d291dc4b6a
  pairs ::
    Text.Megaparsec.Text.Parser
      [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(U))><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                ExprParser.pairs1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <Data.Text.Internal.Text>_N
                          <Data.Functor.Identity.Identity>_R
                          <[(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]>_R)) -}
d4bbb07b5bba6e4eb7ebaf8b3f2fbfb3
  pairs1 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ([(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ([(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(U))><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta3 :: [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b1) ->
                 ExprParser.$wparsePair
                   @ b1
                   eta2
                   (\ (x :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer))
                      (eta :: Text.Megaparsec.Prim.State
                                Data.Text.Internal.Text)[OneShot]
                      (eta7 :: Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))[OneShot] ->
                    Text.Megaparsec.Prim.$w$cmany
                      @ Text.Megaparsec.Error.Dec
                      @ Data.Text.Internal.Text
                      @ Data.Functor.Identity.Identity
                      @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                      ExprParser.pairs2
                        `cast`
                      (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                <Text.Megaparsec.Error.Dec>_N
                                <Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <(Data.Text.Internal.Text, GHC.Integer.Type.Integer)>_R))
                      @ b1
                      eta
                      (\ (x1 :: [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]) ->
                       eta3
                         (GHC.Types.:
                            @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                            x
                            x1))
                      eta4
                      (Text.Megaparsec.Prim.accHints
                         @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         @ [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
                         @ Data.Text.Internal.Text
                         @ Data.Functor.Identity.Identity
                         @ b1
                         eta7
                         (\ (x1 :: [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]) ->
                          eta3
                            (GHC.Types.:
                               @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                               x
                               x1))))
                   (\ (x :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer))
                      (eta :: Text.Megaparsec.Prim.State
                                Data.Text.Internal.Text)[OneShot]
                      (eta7 :: Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))[OneShot] ->
                    Text.Megaparsec.Prim.$w$cmany
                      @ Text.Megaparsec.Error.Dec
                      @ Data.Text.Internal.Text
                      @ Data.Functor.Identity.Identity
                      @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                      ExprParser.pairs2
                        `cast`
                      (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                <Text.Megaparsec.Error.Dec>_N
                                <Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <(Data.Text.Internal.Text, GHC.Integer.Type.Integer)>_R))
                      @ b1
                      eta
                      (\ (x1 :: [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]) ->
                       eta3
                         (GHC.Types.:
                            @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                            x
                            x1))
                      eta4
                      (Text.Megaparsec.Prim.accHints
                         @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         @ [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
                         @ Data.Text.Internal.Text
                         @ Data.Functor.Identity.Identity
                         @ b1
                         eta7
                         (\ (x1 :: [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]) ->
                          eta5
                            (GHC.Types.:
                               @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                               x
                               x1))))
                   eta6) -}
5ab8fc97b235b631f33cf950d4200e54
  pairs2 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((Data.Text.Internal.Text, GHC.Integer.Type.Integer)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((Data.Text.Internal.Text, GHC.Integer.Type.Integer)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w4 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w5 :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w6 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1)
                   (w7 :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b1)
                   (w8 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c*>
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                   ExprParser.pairs7
                   ExprParser.pairs3
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <(Data.Text.Internal.Text, GHC.Integer.Type.Integer)>_R))
                   @ b1
                   w4
                   w5
                   w6
                   w7
                   w8) -}
9dc45adf2d9f92a946f45a3f9064c7b0
  pairs3 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((Data.Text.Internal.Text, GHC.Integer.Type.Integer)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> ((Data.Text.Internal.Text, GHC.Integer.Type.Integer)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,C(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (w1 :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                          -> Data.Functor.Identity.Identity b) ->
                 ExprParser.$wparsePair @ b w w1 w3 w4) -}
a8b11bf3748172ec3d1c4bc7b2d1fabf
  pairs4 ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      Data.Text.Internal.Text
  {- Unfolding: (ExprParser.symbol ExprParser.pairs5) -}
3596665e9c66a4d57d186d725226defc
  pairs5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ")"#) -}
cb0501d96b9d8a446a6583d0cd261e01
  pairs6 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((Data.Text.Internal.Text, GHC.Integer.Type.Integer)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((Data.Text.Internal.Text, GHC.Integer.Type.Integer)
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)
                   (eta3 :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Prim.Hints
                                 (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                              Text.Megaparsec.Error.Dec
                            -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.Prim.$w$c<*
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Prim.$fStreamText0
                   @ (GHC.Integer.Type.Integer
                      -> (Data.Text.Internal.Text, GHC.Integer.Type.Integer))
                   @ Data.Text.Internal.Text
                   ExprParser.pairs9
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Integer.Type.Integer
                              -> (Data.Text.Internal.Text, GHC.Integer.Type.Integer)>_R))
                   ExprParser.pairs7
                   @ b1
                   eta2
                   (\ (x :: GHC.Integer.Type.Integer
                            -> (Data.Text.Internal.Text, GHC.Integer.Type.Integer))
                      (s' :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)[OneShot]
                      (hs :: Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))[OneShot] ->
                    Text.Megaparsec.Prim.$w$c<*
                      @ Text.Megaparsec.Error.Dec
                      @ Data.Text.Internal.Text
                      @ Data.Functor.Identity.Identity
                      Text.Megaparsec.Prim.$fStreamText0
                      @ GHC.Integer.Type.Integer
                      @ ()
                      ExprParser.integer2
                        `cast`
                      (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                <Text.Megaparsec.Error.Dec>_N
                                <Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Integer.Type.Integer>_R))
                      ExprParser.sc
                      @ b1
                      s'
                      (\ (x1 :: GHC.Integer.Type.Integer) -> eta3 (x x1))
                      eta4
                      (Text.Megaparsec.Prim.accHints
                         @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         @ GHC.Integer.Type.Integer
                         @ Data.Text.Internal.Text
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         (GHC.Base..
                            @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                            @ (Text.Megaparsec.Prim.State Data.Text.Internal.Text
                               -> Text.Megaparsec.Prim.Hints
                                    (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                               -> Data.Functor.Identity.Identity b1)
                            @ GHC.Integer.Type.Integer
                            eta3
                            x))
                      (Text.Megaparsec.Prim.withHints
                         @ Data.Text.Internal.Text
                         @ Text.Megaparsec.Error.Dec
                         @ Data.Functor.Identity.Identity
                         @ b1
                         GHC.Classes.$fOrdChar
                           `cast`
                         (GHC.Classes.Ord (Sym (Text.Megaparsec.Prim.D:R:TokenText0[0])))_R
                         hs
                         eta4))
                   eta4
                   (\ (x :: GHC.Integer.Type.Integer
                            -> (Data.Text.Internal.Text, GHC.Integer.Type.Integer))
                      (s' :: Text.Megaparsec.Prim.State Data.Text.Internal.Text)[OneShot]
                      (hs :: Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token Data.Text.Internal.Text))[OneShot] ->
                    Text.Megaparsec.Prim.$w$c<*
                      @ Text.Megaparsec.Error.Dec
                      @ Data.Text.Internal.Text
                      @ Data.Functor.Identity.Identity
                      Text.Megaparsec.Prim.$fStreamText0
                      @ GHC.Integer.Type.Integer
                      @ ()
                      ExprParser.integer2
                        `cast`
                      (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                <Text.Megaparsec.Error.Dec>_N
                                <Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Integer.Type.Integer>_R))
                      ExprParser.sc
                      @ b1
                      s'
                      (\ (x1 :: GHC.Integer.Type.Integer) -> eta3 (x x1))
                      eta4
                      (Text.Megaparsec.Prim.accHints
                         @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                         @ GHC.Integer.Type.Integer
                         @ Data.Text.Internal.Text
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         (GHC.Base..
                            @ (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
                            @ (Text.Megaparsec.Prim.State Data.Text.Internal.Text
                               -> Text.Megaparsec.Prim.Hints
                                    (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                               -> Data.Functor.Identity.Identity b1)
                            @ GHC.Integer.Type.Integer
                            eta5
                            x))
                      (Text.Megaparsec.Prim.withHints
                         @ Data.Text.Internal.Text
                         @ Text.Megaparsec.Error.Dec
                         @ Data.Functor.Identity.Identity
                         @ b1
                         GHC.Classes.$fOrdChar
                           `cast`
                         (GHC.Classes.Ord (Sym (Text.Megaparsec.Prim.D:R:TokenText0[0])))_R
                         hs
                         eta6))
                   eta6) -}
d2f5475b18dd4f71cd19e8cbaf14a8e5
  pairs7 :: Text.Megaparsec.Text.Parser Data.Text.Internal.Text
  {- Unfolding: (ExprParser.symbol ExprParser.pairs8) -}
e9ec0dd3accac7a917745fe59574a586
  pairs8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ","#) -}
79d793f818771e76cb568de7966364a0
  pairs9 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> ((GHC.Integer.Type.Integer
         -> (Data.Text.Internal.Text, GHC.Integer.Type.Integer))
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Integer.Type.Integer
         -> (Data.Text.Internal.Text, GHC.Integer.Type.Integer))
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U> -}
9e4e8b28b6ed926673e883df2278b914
  parens ::
    Text.Megaparsec.Text.Parser a -> Text.Megaparsec.Text.Parser a
  {- Arity: 6,
     Unfolding: (\ @ a ->
                 ExprParser.$sbetween
                   @ Data.Text.Internal.Text
                   @ Data.Text.Internal.Text
                   @ a
                   ExprParser.parens1
                   ExprParser.pairs4) -}
b8fb6a74ea855d56850bb11d4aa7f827
  parens1 ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      Data.Text.Internal.Text
  {- Unfolding: (ExprParser.symbol ExprParser.parens2) -}
38fa7f97f79cf6690adac9c1b69c426f
  parens2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "("#) -}
66ab4a65bc58ba959b20c1ca2ebebb0a
  parseExpression :: ExprParser.ExpressionInfo -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(SLL),1*U(1*U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                ExprParser.parseExpression1
                  `cast`
                (<ExprParser.ExpressionInfo>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f3ce60fee435b3196283d0cb895f63fd
  parseExpression1 ::
    ExprParser.ExpressionInfo
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SLL),1*U(1*U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ExprParser.ExpressionInfo)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { ExprParser.ExpressionInfo ww1 ww2 ww3 ->
                 ExprParser.$wparseExpression ww1 ww2 ww3 w1 }) -}
571e95688f64cf762428b5fed1fb3cb1
  parseExpression2 :: ExprParser.Expr
  {- Strictness: x -}
59685da7b936ae3b708bdbe8400e0232
  parseIO :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                ExprParser.parseIO1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ce36b5b28fa812d149d6d016ca875c00
  parseIO1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds { (#,#) ipv ipv1 ->
                 case Options.Applicative.Extra.customExecParser2
                        @ ExprParser.ExpressionInfo
                        (Options.Applicative.Extra.execParserPure
                           @ ExprParser.ExpressionInfo
                           Options.Applicative.Builder.defaultPrefs
                           ExprParser.parseIO2
                           ipv1)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 ExprParser.parseExpression1 ipv3 ipv2 } }) -}
b3aa0362171692e61326783e80e11dab
  parseIO2 ::
    Options.Applicative.Types.ParserInfo ExprParser.ExpressionInfo
  {- Unfolding: (Options.Applicative.Types.ParserInfo
                   @ ExprParser.ExpressionInfo
                   ExprParser.parseIO5
                   GHC.Types.True
                   ExprParser.parseIO3
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Options.Applicative.Builder.info1
                   GHC.Types.True) -}
369f88a452b9f6e74447f3879c231f4e
  parseIO3 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   ExprParser.parseIO4) -}
e2d241d1554ecc8df10029e5c7d32778
  parseIO4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Enter expression and values for evaluating..."#) -}
75953fc68ac95dbea94c25337de75c8e
  parseIO5 ::
    Options.Applicative.Types.Parser ExprParser.ExpressionInfo
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ ExprParser.ExpressionInfo
                   @ ExprParser.ExpressionInfo
                   (Options.Applicative.Extra.helper @ ExprParser.ExpressionInfo)
                   ExprParser.einfo) -}
902c986f9399bc8aac52d7127d3c7dc8
  parsePair ::
    Text.Megaparsec.Text.Parser
      (Data.Text.Internal.Text, GHC.Integer.Type.Integer)
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                ExprParser.pairs3
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <Data.Text.Internal.Text>_N
                          <Data.Functor.Identity.Identity>_R
                          <(Data.Text.Internal.Text, GHC.Integer.Type.Integer)>_R)) -}
ec0b632fb4265acb620850cf0b9197ac
  parsePairs ::
    Data.Text.Internal.Text
    -> Data.Map.Base.Map
         Data.Text.Internal.Text GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: Data.Text.Internal.Text) ->
                 case (ExprParser.pairs1
                         @ (Text.Megaparsec.Prim.Reply
                              Text.Megaparsec.Error.Dec
                              Data.Text.Internal.Text
                              [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)])
                         (Text.Megaparsec.Prim.State
                            @ Data.Text.Internal.Text
                            s
                            ExprParser.parsePairs2
                            Text.Megaparsec.Pos.defaultTabWidth_x
                              `cast`
                            (Sym (Text.Megaparsec.Pos.N:Pos[0])))
                         (Text.Megaparsec.Prim.$fMonadContParsecT5
                            @ Text.Megaparsec.Error.Dec
                            @ Data.Text.Internal.Text
                            @ [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)])
                           `cast`
                         (<[(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]>_R
                          ->_R <Text.Megaparsec.Prim.State Data.Text.Internal.Text>_R
                          ->_R <Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Prim.Reply
                                           Text.Megaparsec.Error.Dec
                                           Data.Text.Internal.Text
                                           [(Data.Text.Internal.Text,
                                             GHC.Integer.Type.Integer)]>_R))
                         (Text.Megaparsec.Prim.$fMonadContParsecT4
                            @ [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
                            @ Data.Text.Internal.Text
                            @ Text.Megaparsec.Error.Dec)
                           `cast`
                         (<Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                             Text.Megaparsec.Error.Dec>_R
                          ->_R <Text.Megaparsec.Prim.State Data.Text.Internal.Text>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Prim.Reply
                                           Text.Megaparsec.Error.Dec
                                           Data.Text.Internal.Text
                                           [(Data.Text.Internal.Text,
                                             GHC.Integer.Type.Integer)]>_R))
                         (Text.Megaparsec.Prim.$fMonadContParsecT3
                            @ Text.Megaparsec.Error.Dec
                            @ Data.Text.Internal.Text
                            @ [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)])
                           `cast`
                         (<[(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]>_R
                          ->_R <Text.Megaparsec.Prim.State Data.Text.Internal.Text>_R
                          ->_R <Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Prim.Reply
                                           Text.Megaparsec.Error.Dec
                                           Data.Text.Internal.Text
                                           [(Data.Text.Internal.Text,
                                             GHC.Integer.Type.Integer)]>_R))
                         (Text.Megaparsec.Prim.$fMonadContParsecT2
                            @ [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
                            @ Data.Text.Internal.Text
                            @ Text.Megaparsec.Error.Dec)
                           `cast`
                         (<Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                             Text.Megaparsec.Error.Dec>_R
                          ->_R <Text.Megaparsec.Prim.State Data.Text.Internal.Text>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Prim.Reply
                                           Text.Megaparsec.Error.Dec
                                           Data.Text.Internal.Text
                                           [(Data.Text.Internal.Text,
                                             GHC.Integer.Type.Integer)]>_R)))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Text.Megaparsec.Prim.Reply
                              Text.Megaparsec.Error.Dec
                              Data.Text.Internal.Text
                              [(Data.Text.Internal.Text,
                                GHC.Integer.Type.Integer)]>_R) of wild { Text.Megaparsec.Prim.Reply s' ds result ->
                 case result of wild1 {
                   Text.Megaparsec.Prim.OK x
                   -> ExprParser.$sfromList @ GHC.Integer.Type.Integer x
                   Text.Megaparsec.Prim.Error e1
                   -> case ExprParser.parsePairs1
                      ret_ty (Data.Map.Base.Map
                                Data.Text.Internal.Text GHC.Integer.Type.Integer)
                      of {} } }) -}
dcfe25d7dbcca91b870b940d396323e4
  parsePairs1 ::
    [(Data.Text.Internal.Text, GHC.Integer.Type.Integer)]
  {- Strictness: x -}
928a9c47fd8465aae121bfd361117db2
  parsePairs2 ::
    Data.List.NonEmpty.NonEmpty Text.Megaparsec.Pos.SourcePos
  {- HasNoCafRefs,
     Unfolding: (Data.List.NonEmpty.:|
                   @ Text.Megaparsec.Pos.SourcePos
                   ExprParser.parsePairs3
                   (GHC.Types.[] @ Text.Megaparsec.Pos.SourcePos)) -}
de90b8a4659fa1f6f0108a81fc986f84
  parsePairs3 :: Text.Megaparsec.Pos.SourcePos
  {- HasNoCafRefs,
     Unfolding: (Text.Megaparsec.Pos.SourcePos
                   (GHC.Types.[] @ GHC.Types.Char)
                   1##
                   1##) -}
4b392d8a2d7e293a4e4d9a4a622895f9
  sc :: Text.Megaparsec.Text.Parser ()
  {- Unfolding: (Text.Megaparsec.Lexer.space
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   (ExprParser.$s$fMonadParsecesParsecT
                      @ Data.Functor.Identity.Identity)
                   ExprParser.sc6
                     `cast`
                   (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                             <Text.Megaparsec.Error.Dec>_N
                             <Data.Text.Internal.Text>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   ExprParser.sc4
                   ExprParser.sc1) -}
96c53fe0fb188da9f3bb34fe5a3e05b6
  sc1 ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      ()
  {- Unfolding: (Text.Megaparsec.Lexer.skipBlockComment
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   (ExprParser.$s$fMonadParsecesParsecT
                      @ Data.Functor.Identity.Identity)
                   (GHC.Types.Eq#
                      @ *
                      @ *
                      @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                      @ GHC.Types.Char
                      @~ (Text.Megaparsec.Prim.D:R:TokenText0[0]))
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0] <*>_N) <Text.Megaparsec.Prim.Token
                                                             Data.Text.Internal.Text>_N <GHC.Types.Char>_N)
                   ExprParser.sc3
                   ExprParser.sc2) -}
0338f8ea16592f8602b5ebc10b37e4a3
  sc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*/"#) -}
0c6edc5e19f620eabdbca6237fd18a5f
  sc3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/*"#) -}
f4396bfedb4766f6580459e6c9728c4c
  sc4 ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      ()
  {- Unfolding: (Text.Megaparsec.Lexer.skipLineComment
                   @ Text.Megaparsec.Error.Dec
                   @ Data.Text.Internal.Text
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity)
                   (ExprParser.$s$fMonadParsecesParsecT
                      @ Data.Functor.Identity.Identity)
                   (GHC.Types.Eq#
                      @ *
                      @ *
                      @ (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
                      @ GHC.Types.Char
                      @~ (Text.Megaparsec.Prim.D:R:TokenText0[0]))
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0] <*>_N) <Text.Megaparsec.Prim.Token
                                                             Data.Text.Internal.Text>_N <GHC.Types.Char>_N)
                   ExprParser.sc5) -}
299a22a78adb3ea86c1849b0d8d10b3a
  sc5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "//"#) -}
08f3ccaaf200b9ce1dd219ad9e273dd7
  sc6 ::
    Text.Megaparsec.Prim.State Data.Text.Internal.Text
    -> (()
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> (()
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token Data.Text.Internal.Text)
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State Data.Text.Internal.Text
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5 -}
ea977a17e94bcb398a273323eb1e56ac
  symbol ::
    Data.Text.Internal.Text
    -> Text.Megaparsec.Text.Parser Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,1*U(U,U,U)> -}
07fc42dbeb3c684f28fcbae5b3b15748
  term :: Text.Megaparsec.Text.Parser ExprParser.Expr
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                ExprParser.exprParser1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <Data.Text.Internal.Text>_N
                          <Data.Functor.Identity.Identity>_R
                          <ExprParser.Expr>_R)) -}
dfd8f6ff923c2992084275d5fbfc6f3a
  values :: ExprParser.ExpressionInfo -> Data.Text.Internal.Text
  RecSel Left ExprParser.ExpressionInfo
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ExprParser.ExpressionInfo) ->
                 case ds of wild { ExprParser.ExpressionInfo ds1 ds2 ds3 ->
                 ds3 }) -}
instance GHC.Show.Show [ExprParser.BinOperation]
  = ExprParser.$fShowBinOperation
instance GHC.Show.Show [ExprParser.Expr] = ExprParser.$fShowExpr
instance GHC.Show.Show [ExprParser.ExpressionInfo]
  = ExprParser.$fShowExpressionInfo
instance GHC.Show.Show [ExprParser.Output]
  = ExprParser.$fShowOutput
"SPEC/ExprParser $fAlternativeParsecT @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                              -> *)
                                                                      ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                             Text.Megaparsec.Error.Dec)
                                                                      ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                     Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fAlternativeParsecT @ Text.Megaparsec.Error.Dec
                                            @ Data.Text.Internal.Text
                                            @ m
                                            $dErrorComponent
                                            $dStream
  = ExprParser.$s$fAlternativeParsecT @ m
"SPEC/ExprParser $fApplicativeParsecT @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                              -> *)
                                                                      ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                             Text.Megaparsec.Error.Dec)
                                                                      ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                     Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fApplicativeParsecT @ Text.Megaparsec.Error.Dec
                                            @ Data.Text.Internal.Text
                                            @ m
                                            $dErrorComponent
                                            $dStream
  = ExprParser.$s$fAlternativeParsecT_$s$fApplicativeParsecT @ m
"SPEC/ExprParser $fApplicativeParsecT_$cp1Applicative @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                                              -> *)
                                                                                      ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                             Text.Megaparsec.Error.Dec)
                                                                                      ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                     Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fApplicativeParsecT_$cp1Applicative @ Text.Megaparsec.Error.Dec
                                                            @ Data.Text.Internal.Text
                                                            @ m
                                                            $dErrorComponent
                                                            $dStream
  = ExprParser.$s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative
      @ m
"SPEC/ExprParser $fMonadParsecT @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                        -> *)
                                                                ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                       Text.Megaparsec.Error.Dec)
                                                                ($dStream :: Text.Megaparsec.Prim.Stream
                                                                               Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fMonadParsecT @ Text.Megaparsec.Error.Dec
                                      @ Data.Text.Internal.Text
                                      @ m
                                      $dErrorComponent
                                      $dStream
  = ExprParser.$s$fMonadParsecT @ m
"SPEC/ExprParser $fMonadParsecesParsecT @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                                -> *)
                                                                        ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                               Text.Megaparsec.Error.Dec)
                                                                        ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                       Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT @ Text.Megaparsec.Error.Dec
                                              @ Data.Text.Internal.Text
                                              @ m
                                              $dErrorComponent
                                              $dStream
  = ExprParser.$s$fMonadParsecesParsecT @ m
"SPEC/ExprParser $fMonadParsecesParsecT_$chidden @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                                         -> *)
                                                                                 ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                        Text.Megaparsec.Error.Dec)
                                                                                 ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$chidden @ Text.Megaparsec.Error.Dec
                                                       @ Data.Text.Internal.Text
                                                       @ m
                                                       $dErrorComponent
                                                       $dStream
  = ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden
      @ m
"SPEC/ExprParser $fMonadParsecesParsecT_$clabel @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                                        -> *)
                                                                                ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                       Text.Megaparsec.Error.Dec)
                                                                                ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                               Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$clabel @ Text.Megaparsec.Error.Dec
                                                      @ Data.Text.Internal.Text
                                                      @ m
                                                      $dErrorComponent
                                                      $dStream
  = ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel
      @ m
"SPEC/ExprParser $fMonadParsecesParsecT_$cp1MonadParsec @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                                                -> *)
                                                                                        ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                               Text.Megaparsec.Error.Dec)
                                                                                        ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                       Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cp1MonadParsec @ Text.Megaparsec.Error.Dec
                                                              @ Data.Text.Internal.Text
                                                              @ m
                                                              $dErrorComponent
                                                              $dStream
  = ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec
      @ m
"SPEC/ExprParser $fMonadParsecesParsecT_$cp2MonadParsec @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                                                -> *)
                                                                                        ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                               Text.Megaparsec.Error.Dec)
                                                                                        ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                       Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cp2MonadParsec @ Text.Megaparsec.Error.Dec
                                                              @ Data.Text.Internal.Text
                                                              @ m
                                                              $dErrorComponent
                                                              $dStream
  = ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec
      @ m
"SPEC/ExprParser $fMonadParsecesParsecT_$ctoken @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                                        -> *)
                                                                                ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                       Text.Megaparsec.Error.Dec)
                                                                                ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                               Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctoken @ Text.Megaparsec.Error.Dec
                                                      @ Data.Text.Internal.Text
                                                      @ m
                                                      $dErrorComponent
                                                      $dStream
  = ExprParser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken
      @ m
"SPEC/ExprParser $fMonadPlusParsecT @ Dec @ Text _" [ALWAYS] forall @ (m :: *
                                                                            -> *)
                                                                    ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                           Text.Megaparsec.Error.Dec)
                                                                    ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                   Data.Text.Internal.Text)
  Text.Megaparsec.Prim.$fMonadPlusParsecT @ Text.Megaparsec.Error.Dec
                                          @ Data.Text.Internal.Text
                                          @ m
                                          $dErrorComponent
                                          $dStream
  = ExprParser.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT @ m
"SPEC/ExprParser between @ (ParsecT Dec Text Identity) _ _ _" [ALWAYS] forall @ open
                                                                              @ close
                                                                              @ a
                                                                              ($dApplicative :: GHC.Base.Applicative
                                                                                                  (Text.Megaparsec.Prim.ParsecT
                                                                                                     Text.Megaparsec.Error.Dec
                                                                                                     Data.Text.Internal.Text
                                                                                                     Data.Functor.Identity.Identity))
  Text.Megaparsec.Combinator.between @ (Text.Megaparsec.Prim.ParsecT
                                          Text.Megaparsec.Error.Dec
                                          Data.Text.Internal.Text
                                          Data.Functor.Identity.Identity)
                                     @ open
                                     @ close
                                     @ a
                                     $dApplicative
  = ExprParser.$sbetween @ open @ close @ a
"SPEC/ExprParser fromList @ Text _" [ALWAYS] forall @ a
                                                    ($dOrd :: GHC.Classes.Ord
                                                                Data.Text.Internal.Text)
  Data.Map.Base.fromList @ Data.Text.Internal.Text @ a $dOrd
  = ExprParser.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

