
==================== FINAL INTERFACE ====================
2016-11-07 14:02:54.884046 UTC

interface exam2-0.1.0.0-5J9SdOISNPfLgwpUsYJGtC:FloydWarshall 8001
  interface hash: ccbbc3e367aa69697ac1469e28b2ebd8
  ABI hash: 6b8298742a6a76ec03602e0b378953cc
  export-list hash: 42d723403c09b4bad7e31023ad7bddca
  orphan hash: 76573af0a44d9ed19edc604d34b3a304
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  FloydWarshall.edge
  FloydWarshall.floyd
  FloydWarshall.main
  FloydWarshall.readGraph
  FloydWarshall.Edge
  FloydWarshall.Graph{FloydWarshall.Graph edges vertices}
  FloydWarshall.Vertex
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Printf 981db3fab2db52a63576c71c790058bf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec b7773bc8c1ac3ed6fd10bf4cd77e4211
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char f91679694c2c067f954c462314356933
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator 1d7341515b8e846702122acf50b1e854
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.String 7450eb18e981d8dd4bc3d349080894ba
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Maybe 95e0bda3bd306ebbde6d0c7967416cea
7bbc25158bac7ec055cb48e49a52a80e
  $fShowGraph ::
    GHC.Show.Show a => GHC.Show.Show (FloydWarshall.Graph a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (FloydWarshall.Graph a)
                  (FloydWarshall.$fShowGraph_$cshowsPrec @ a $dShow)
                  (FloydWarshall.$fShowGraph_$cshow @ a $dShow)
                  (FloydWarshall.$fShowGraph_$cshowList @ a $dShow) -}
99e8d05f87ac44246ada991db3d146ad
  $fShowGraph2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Vertices: %s\n\
                   \Edges:\n\
                   \%s"#) -}
59891c0836f8b45c61f67704f7a93dff
  $fShowGraph3 ::
    GHC.Base.String -> [Text.Printf.UPrintf] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (fmts :: GHC.Base.String)
                   (args :: [Text.Printf.UPrintf]) ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Text.Printf.$fIsCharChar_$cfromChar
                   (Text.Printf.uprintfs
                      fmts
                      (GHC.List.reverse1
                         @ Text.Printf.UPrintf
                         args
                         (GHC.Types.[] @ Text.Printf.UPrintf))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
b9d1b3b5edd2f42a2fec9b2b8dd4ebcc
  $fShowGraph7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "%s -> %s"#) -}
7bbc25158bac7ec055cb48e49a52a80e
  $fShowGraph_$cshow ::
    GHC.Show.Show a => FloydWarshall.Graph a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,U,A)><L,U(1*U,1*U)> -}
7bbc25158bac7ec055cb48e49a52a80e
  $fShowGraph_$cshowList ::
    GHC.Show.Show a => [FloydWarshall.Graph a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,U,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [FloydWarshall.Graph a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (FloydWarshall.Graph a)
                   (\ (x :: FloydWarshall.Graph a) (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (FloydWarshall.$fShowGraph_$cshow @ a $dShow x)
                      s1)
                   ls
                   s) -}
7bbc25158bac7ec055cb48e49a52a80e
  $fShowGraph_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> FloydWarshall.Graph a -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,U(A,U,A)><L,A><L,U(U,U)><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (x :: FloydWarshall.Graph a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (FloydWarshall.$fShowGraph_$cshow @ a $dShow x))
                   s) -}
ff277b129af12af8b311796b38567d21
  $fShowGraph_$s$fPrintfArg[]_$cparseFormat ::
    [GHC.Types.Char] -> Text.Printf.ModifierParser
  {- Arity: 2, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: [GHC.Types.Char]) (ds2 :: [GHC.Types.Char]) ->
                 case ds2 of wild {
                   [] -> Text.Printf.errorShortFormat @ Text.Printf.FormatParse
                   : c1 cs
                   -> Text.Printf.FormatParse
                        (GHC.Types.[] @ GHC.Types.Char)
                        c1
                        cs }) -}
ded29d68dc2bd8b1580b28835b6ad655
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (FloydWarshall.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok)
                  (FloydWarshall.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
347a5e7d8f25c5d49dd4b21b4e392d65
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
a7eac47d18cbf43e8d5d086a404f46e9
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
80f93c71dbbe6c1917f89986015e209a
  $tc'Graph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9028628992660016862##
                   123472506207885620##
                   FloydWarshall.$trModule
                   FloydWarshall.$tc'Graph1) -}
6a23a86ca4f68e787042bd81418a3591
  $tc'Graph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Graph"#) -}
a12783c914127f16c1dae00557e0a359
  $tcGraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2735032132925730572##
                   1543255027108400153##
                   FloydWarshall.$trModule
                   FloydWarshall.$tcGraph1) -}
7e571b873e7eeef646297d2419992aae
  $tcGraph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Graph"#) -}
d98867c6dc8da1173477973810539045
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FloydWarshall.$trModule2
                   FloydWarshall.$trModule1) -}
cd708f838d08dc997c6320be0213bd94
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FloydWarshall"#) -}
a73b235259bb6df066e88f832b1bc015
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "exam2-0.1.0.0-5J9SdOISNPfLgwpUsYJGtC"#) -}
2e759df32392a7ff17d1ad227e7e1bf5
  $wfloyd ::
    GHC.Classes.Eq a =>
    FloydWarshall.Graph a
    -> (# [FloydWarshall.Vertex a], [FloydWarshall.Edge a] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U(U,U)>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: FloydWarshall.Graph a) ->
                 (# case w1 of wild { FloydWarshall.Graph ds ds1 -> ds },
                    case w1 of wild { FloydWarshall.Graph ds ds1 ->
                    let {
                      lvl16 :: (a, a) -> (a, a) -> GHC.Types.Bool {- Arity: 2 -}
                      = GHC.Classes.$fEq(,)_$c== @ a @ a w w
                    } in
                    letrec {
                      go :: [FloydWarshall.Vertex a] -> [(a, a)] -> [(a, a)]
                        {- Arity: 2, Strictness: <S,1*U><S,U> -}
                      = \ (ds2 :: [FloydWarshall.Vertex a]) (eta :: [(a, a)]) ->
                        case ds2 of wild1 {
                          [] -> eta
                          : y ys
                          -> go
                               ys
                               (Data.OldList.nubBy
                                  @ (a, a)
                                  lvl16
                                  (GHC.Base.++
                                     @ (a, a)
                                     eta
                                     (letrec {
                                        go1 :: [(a, a)] -> [(a, a)]
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds3 :: [(a, a)]) ->
                                          case ds3 of wild2 {
                                            [] -> GHC.Types.[] @ (a, a)
                                            : y1 ys1
                                            -> case y1 of wild3 { (,) a1 b ->
                                               let {
                                                 z :: [(a, a)] = go1 ys1
                                               } in
                                               letrec {
                                                 go2 :: [(a, a)] -> [(a, a)]
                                                   {- Arity: 1, Strictness: <S,1*U> -}
                                                 = \ (ds4 :: [(a, a)]) ->
                                                   case ds4 of wild4 {
                                                     [] -> z
                                                     : y2 ys2
                                                     -> case y2 of wild5 { (,) c d ->
                                                        case GHC.Classes.== @ a w b c of wild6 {
                                                          GHC.Types.False -> go2 ys2
                                                          GHC.Types.True
                                                          -> GHC.Types.:
                                                               @ (a, a)
                                                               (a1, d)
                                                               (go2 ys2) } } }
                                               } in
                                               go2 eta } }
                                      } in
                                      go1 eta))) }
                    } in
                    go ds ds1 } #)) -}
5690967ee75538d75fa13afc51ceb41c
  type Edge a = (a, a)
7bbc25158bac7ec055cb48e49a52a80e
  data Graph a
    = Graph {vertices :: [FloydWarshall.Vertex a],
             edges :: [FloydWarshall.Edge a]}
f18f286c6dbe8d682e7d3ea445ea1a6f
  type Vertex a = a
7e90d86a5bf2203fb8be09eb9a858abe
  edge ::
    Text.Parsec.String.Parser (FloydWarshall.Edge GHC.Base.String)
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                FloydWarshall.edge1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <FloydWarshall.Edge GHC.Base.String>_R)) -}
4c2d34bf83239976eb61d1ef0a19a067
  edge1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (FloydWarshall.Edge GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (FloydWarshall.Edge GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: FloydWarshall.Edge GHC.Base.String
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: FloydWarshall.Edge GHC.Base.String
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   FloydWarshall.edge3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   s1
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    FloydWarshall.edge2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: FloydWarshall.Edge GHC.Base.String)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    FloydWarshall.edge2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: FloydWarshall.Edge GHC.Base.String)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
7af3af1fd1a1321aea0255637bcc0994
  edge2 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (FloydWarshall.Edge GHC.Base.String
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (FloydWarshall.Edge GHC.Base.String
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
923d6a6fa324b45243a58041241e174b
  edge3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   FloydWarshall.edge5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   FloydWarshall.edge4
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
bcf63edc165a8fcfbcc8bfb29909ae27
  edge4 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.alphaNum2
                   (GHC.Types.[] @ GHC.Base.String)) -}
765578b2f9a7202b0ecc7161ebf4b12c
  edge5 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (FloydWarshall.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isAlphaNum
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
3c85e6d98ef4c94a93fc1599a176536c
  edges :: FloydWarshall.Graph a -> [FloydWarshall.Edge a]
  RecSel Left FloydWarshall.Graph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: FloydWarshall.Graph a) ->
                 case ds of wild { FloydWarshall.Graph ds1 ds2 -> ds2 }) -}
e883a36f4d68775457e75434bf7dec05
  floyd ::
    GHC.Classes.Eq a => FloydWarshall.Graph a -> FloydWarshall.Graph a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Classes.Eq a) (w1 :: FloydWarshall.Graph a) ->
                 case FloydWarshall.$wfloyd @ a w w1 of ww { (#,#) ww1 ww2 ->
                 FloydWarshall.Graph @ a ww1 ww2 }) -}
05260fe1129366a098736ff8019d9a5d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <B,1*U>x,
     Unfolding: InlineRule (0, True, True)
                FloydWarshall.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
aa62d17c3df3900978fc6096c902a704
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,1*U>x -}
580f3bdb35491a5d274944fcb9c894c4
  readGraph :: GHC.Types.IO (FloydWarshall.Graph GHC.Base.String)
  {- Strictness: x -}
bc47dc57fe53ecb45bfb2f3a0f3bc631
  vertices :: FloydWarshall.Graph a -> [FloydWarshall.Vertex a]
  RecSel Left FloydWarshall.Graph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: FloydWarshall.Graph a) ->
                 case ds of wild { FloydWarshall.Graph ds1 ds2 -> ds1 }) -}
instance [safe] GHC.Show.Show [FloydWarshall.Graph]
  = FloydWarshall.$fShowGraph
"SPEC/FloydWarshall $fPrintfArg[]_$cparseFormat @ Char" [ALWAYS] forall ($dIsChar :: Text.Printf.IsChar
                                                                                       GHC.Types.Char)
  Text.Printf.$fPrintfArg[]_$cparseFormat @ GHC.Types.Char $dIsChar
  = FloydWarshall.$fShowGraph_$s$fPrintfArg[]_$cparseFormat
"SPEC/FloydWarshall $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                                 ($dMonad :: GHC.Base.Monad
                                                                               Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = FloydWarshall.$s$fStream[]mtok @ tok
"SPEC/FloydWarshall $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                            ($dMonad :: GHC.Base.Monad
                                                                                          Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = FloydWarshall.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok
"SPEC/FloydWarshall $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                          ($dMonad :: GHC.Base.Monad
                                                                                        Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = FloydWarshall.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

