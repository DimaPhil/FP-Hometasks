
==================== FINAL INTERFACE ====================
2016-11-07 14:51:59.058009 UTC

interface hw6-0.1.0.0-3LNkNAhD9rXI9R806tlhLb:ArithmeticExpressions 8001
  interface hash: 52da8763c69988e2fcae7dd790fce9cb
  ABI hash: e13482b3ba9853336684cedb4c010471
  export-list hash: c3b5b61eb5dadc2050f4543a0bfc8f58
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  ArithmeticExpressions.eval
  ArithmeticExpressions.Expr{ArithmeticExpressions.Binding ArithmeticExpressions.Const ArithmeticExpressions.Multiply ArithmeticExpressions.Sum ArithmeticExpressions.Variable}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class a2c7beb266585be238cfe9f5989c52b7
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
9419c1e2f4bb8900a14a179473d1a204
  $fShowExpr :: GHC.Show.Show ArithmeticExpressions.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ArithmeticExpressions.Expr
                  ArithmeticExpressions.$fShowExpr_$cshowsPrec
                  ArithmeticExpressions.$fShowExpr_$cshow
                  ArithmeticExpressions.$fShowExpr_$cshowList -}
9419c1e2f4bb8900a14a179473d1a204
  $fShowExpr1 :: ArithmeticExpressions.Expr -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: ArithmeticExpressions.Expr)
                   (w1 :: GHC.Base.String) ->
                 ArithmeticExpressions.$w$cshowsPrec 0# w w1) -}
9419c1e2f4bb8900a14a179473d1a204
  $fShowExpr_$cshow :: ArithmeticExpressions.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ArithmeticExpressions.Expr) ->
                 ArithmeticExpressions.$fShowExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9419c1e2f4bb8900a14a179473d1a204
  $fShowExpr_$cshowList ::
    [ArithmeticExpressions.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ ArithmeticExpressions.Expr
                   ArithmeticExpressions.$fShowExpr1) -}
9419c1e2f4bb8900a14a179473d1a204
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> ArithmeticExpressions.Expr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ArithmeticExpressions.Expr)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ArithmeticExpressions.$w$cshowsPrec ww1 w1 w2 }) -}
4adb2da2596404e079aa7faeefea51bb
  $sinsert_$sgo10 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
48e4000dca7f4de175f6bfd87ffa4d29
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f733d339ff424a65a0ccabc6644dff48
  $tc'Binding :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4540193049471764225##
                   16654027621466689962##
                   ArithmeticExpressions.$trModule
                   ArithmeticExpressions.$tc'Binding1) -}
40215ab6f7118a8351e7c10b47da266b
  $tc'Binding1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Binding"#) -}
72512749915b9c7ff68765f4c1dd8a1c
  $tc'Const :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8731374809760189969##
                   7602698822175934656##
                   ArithmeticExpressions.$trModule
                   ArithmeticExpressions.$tc'Const1) -}
19cc007e632be1e5a7979ddcc0fe1081
  $tc'Const1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Const"#) -}
62f9dbb554b8031bd1616dcade5d4e47
  $tc'Multiply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9286917776708985371##
                   18421544961744742229##
                   ArithmeticExpressions.$trModule
                   ArithmeticExpressions.$tc'Multiply1) -}
f18ffd4bfc0223705aae5fa9aabe53f4
  $tc'Multiply1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Multiply"#) -}
c45c035e2fb63a9fbd4d0a7d0e2b5151
  $tc'Sum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8345574128291802131##
                   3891013786610353588##
                   ArithmeticExpressions.$trModule
                   ArithmeticExpressions.$tc'Sum1) -}
1bf141343347571097a1a80956f2811b
  $tc'Sum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sum"#) -}
2e8e5f4ef0622d6d955d816434d0948a
  $tc'Variable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1996317624411980175##
                   6606460506557235903##
                   ArithmeticExpressions.$trModule
                   ArithmeticExpressions.$tc'Variable1) -}
49acf52d6b9a59a3a20acb6f95bae9b1
  $tc'Variable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Variable"#) -}
f8a4f819a4eab1d04d5fc187191b7258
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14650343436289343906##
                   15659262456963072504##
                   ArithmeticExpressions.$trModule
                   ArithmeticExpressions.$tcExpr1) -}
77e1bc4c1d349d318c48c87e3fec7fe8
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Expr"#) -}
ab3648d7c6be1f7aed24a5ac19dc397a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ArithmeticExpressions.$trModule2
                   ArithmeticExpressions.$trModule1) -}
ff6012008a3f7687ffece817a460b150
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ArithmeticExpressions"#) -}
9708f04ac9cc6912f9c2963231b00bf4
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hw6-0.1.0.0-3LNkNAhD9rXI9R806tlhLb"#) -}
9419c1e2f4bb8900a14a179473d1a204
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> ArithmeticExpressions.Expr -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
9419c1e2f4bb8900a14a179473d1a204
  data Expr
    = Const GHC.Types.Int
    | Variable GHC.Base.String
    | Sum ArithmeticExpressions.Expr ArithmeticExpressions.Expr
    | Multiply ArithmeticExpressions.Expr ArithmeticExpressions.Expr
    | Binding ArithmeticExpressions.Expr GHC.Base.String GHC.Types.Int
2bf9a304a9f364c4f1c232a9c67d5264
  eval ::
    ArithmeticExpressions.Expr
    -> Control.Monad.Trans.Reader.Reader
         (Data.Map.Base.Map GHC.Base.String GHC.Types.Int)
         (GHC.Base.Maybe GHC.Types.Int)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ArithmeticExpressions.eval1
                  `cast`
                (<ArithmeticExpressions.Expr>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Data.Map.Base.Map GHC.Base.String GHC.Types.Int>_R
                               <Data.Functor.Identity.Identity>_R
                               <GHC.Base.Maybe GHC.Types.Int>_N)) -}
4e415cda379338fb3453cc5dd73222d3
  eval1 ::
    ArithmeticExpressions.Expr
    -> Data.Map.Base.Map GHC.Base.String GHC.Types.Int
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe GHC.Types.Int)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
instance [safe] GHC.Show.Show [ArithmeticExpressions.Expr]
  = ArithmeticExpressions.$fShowExpr
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

