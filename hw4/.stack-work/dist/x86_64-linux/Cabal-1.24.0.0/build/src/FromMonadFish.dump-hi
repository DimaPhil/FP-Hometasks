
==================== FINAL INTERFACE ====================
2016-10-14 16:51:36.033022 UTC

interface hw4-0.1.0.0-8ydcU7LkNiv7Z660KS3PPI:FromMonadFish [orphan module] 8001
  interface hash: 74054b261c7b461e210d7db42e83b259
  ABI hash: 46f74ff3dbb2bb92f22298b6d58d68fb
  export-list hash: 679051d8e9eb59a6bfcecb7617af6f5d
  orphan hash: e2ab974f6fab7d4455b1085c580a4c0d
  flag hash: 4d9540608fa4af88916346eaba38fd5f
  sig of: Nothing
  used TH splices: False
  where
exports:
module dependencies: MonadFish MonadJoin
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  MonadFish 67dcdc33a2204f18ea2b8ee627ea9656
  exports: ab82301f4577555c6dc34131996dede0
  >=> f18319b8f7484fad24321a1b30b7f9c4
  MonadFish 92d56bc4b968792a2afec3454a973fcc
  returnFish 27685e8f1b46ba26a03a5d01642540a5
import  -/  MonadJoin f624d6e4af61d2c06c963c915c9539d4
  exports: 85b937455f0e0e5d06206ace7eb16427
  MonadJoin e728c4b3a8bc40ebdb3b6491eaef9138
c27e8bf21a3c8d4505c997f8b234ec5d
  $fMonadJoinm :: MonadFish.MonadFish m => MonadJoin.MonadJoin m
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*C1(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *)
                      ($dMonadFish :: MonadFish.MonadFish m).
                  @ m
                  (FromMonadFish.$fMonadJoinm_$creturnJoin @ m $dMonadFish)
                  (FromMonadFish.$fMonadJoinm_$cjoin @ m $dMonadFish) -}
35611acd115a9faf1dcae0cc8ff5790b
  $fMonadJoinm_$cjoin ::
    MonadFish.MonadFish m => forall a. m (m a) -> m a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LC(C(S))),1*U(A,1*C1(C1(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (m :: * -> *) ($dMonadFish :: MonadFish.MonadFish m) @ a ->
                 MonadFish.>=>
                   @ m
                   $dMonadFish
                   @ (m (m a))
                   @ (m a)
                   @ a
                   (GHC.Base.id @ (m (m a)))
                   (GHC.Base.id @ (m a))) -}
c815be51bcf3e0dd53cf9f720dc2778c
  $fMonadJoinm_$creturnJoin ::
    MonadFish.MonadFish m => forall a. a -> m a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),U(U,A)>,
     Unfolding: InlineRule (0, True, True) MonadFish.returnFish -}
2c4f440d4d5e0af8fbb8f896a3d33675
  $fMonadm ::
    (GHC.Base.Applicative m, MonadFish.MonadFish m) => GHC.Base.Monad m
  DFunId
  {- Arity: 2, Strictness: <L,U><L,U(U,C(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *)
                      ($dApplicative :: GHC.Base.Applicative m)
                      ($dMonadFish :: MonadFish.MonadFish m).
                  @ m
                  (FromMonadFish.$fMonadm_$cp1Monad @ m $dApplicative $dMonadFish)
                  (FromMonadFish.$fMonadm_$c>>= @ m $dApplicative $dMonadFish)
                  (FromMonadFish.$fMonadm_$c>> @ m $dApplicative $dMonadFish)
                  (FromMonadFish.$fMonadm_$creturn @ m $dApplicative $dMonadFish)
                  (FromMonadFish.$fMonadm_$cfail @ m $dApplicative $dMonadFish) -}
d50fd033979445a9a7d69c2776fb21d9
  $fMonadm1 ::
    (GHC.Base.Applicative m, MonadFish.MonadFish m) =>
    GHC.Base.String -> m a
  {- Arity: 3, Strictness: <B,A><B,A><B,U>x, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ (m :: * -> *)
                   @ a
                   (w :: GHC.Base.Applicative m)
                   (w1 :: MonadFish.MonadFish m)
                   (w2 :: GHC.Base.String) ->
                 FromMonadFish.$wlvl @ m @ a w2) -}
70f7e74526fcd2724089bd53b412c81f
  $fMonadm_$c>> ::
    (GHC.Base.Applicative m, MonadFish.MonadFish m) =>
    forall a b. m a -> m b -> m b
  {- Arity: 4, Strictness: <L,U><L,U(U,C(U))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative m)
                   ($dMonadFish :: MonadFish.MonadFish m)
                   @ a
                   @ b
                   (m1 :: m a)
                   (k :: m b) ->
                 FromMonadFish.$fMonadm_$c>>=
                   @ m
                   $dApplicative
                   $dMonadFish
                   @ a
                   @ b
                   m1
                   (\ (ds :: a) -> k)) -}
e55ab1cf5e2dac99e7ff9645003ebf72
  $fMonadm_$c>>= ::
    (GHC.Base.Applicative m, MonadFish.MonadFish m) =>
    forall a b. m a -> (a -> m b) -> m b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(A,1*C1(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (m :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative m)
                   ($dMonadFish :: MonadFish.MonadFish m)
                   @ a
                   @ b ->
                 let {
                   f :: (a -> m b) -> m a -> m b
                   = MonadFish.>=>
                       @ m
                       $dMonadFish
                       @ (m a)
                       @ a
                       @ b
                       (GHC.Base.id @ (m a))
                 } in
                 \ (x :: m a) (y :: a -> m b) -> f y x) -}
87de8b766d448e670c49778519936391
  $fMonadm_$cfail ::
    (GHC.Base.Applicative m, MonadFish.MonadFish m) =>
    forall a. GHC.Base.String -> m a
  {- Arity: 3, Strictness: <B,A><B,A><B,U>x,
     Unfolding: InlineRule (3, True, True)
                (\ @ (m :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative m)
                   ($dMonadFish :: MonadFish.MonadFish m)
                   @ a
                   (eta :: GHC.Base.String) ->
                 FromMonadFish.$fMonadm1 @ m @ a $dApplicative $dMonadFish eta) -}
fbdd19801d14da092ececb243fb4e46e
  $fMonadm_$cp1Monad ::
    (GHC.Base.Applicative m, MonadFish.MonadFish m) =>
    GHC.Base.Applicative m
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (m :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative m)
                   ($dMonadFish :: MonadFish.MonadFish m) ->
                 $dApplicative) -}
f3b5087ef22f4774de699796973b05a5
  $fMonadm_$creturn ::
    (GHC.Base.Applicative m, MonadFish.MonadFish m) =>
    forall a. a -> m a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (m :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative m)
                   ($dMonadFish :: MonadFish.MonadFish m)
                   @ a ->
                 MonadFish.returnFish @ m $dMonadFish @ a) -}
3007fe9514a475c4a0e4245c1d025f39
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FromMonadFish.$trModule2
                   FromMonadFish.$trModule1) -}
aff72c4cb993bfbdaa821aba491caf4c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FromMonadFish"#) -}
1bec1bd13de72b7b538577dae9af0e52
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hw4-0.1.0.0-8ydcU7LkNiv7Z660KS3PPI"#) -}
badd8b4dffb81b5355cd376d99661e95
  $wlvl :: GHC.Base.String -> m a
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
instance [safe] MonadJoin.MonadJoin [.]
  = FromMonadFish.$fMonadJoinm
instance [safe] GHC.Base.Monad [.] = FromMonadFish.$fMonadm
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

