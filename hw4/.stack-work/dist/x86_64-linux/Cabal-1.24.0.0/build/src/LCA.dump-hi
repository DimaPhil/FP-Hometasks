
==================== FINAL INTERFACE ====================
2016-10-14 16:51:36.115423 UTC

interface hw4-0.1.0.0-8ydcU7LkNiv7Z660KS3PPI:LCA 8001
  interface hash: 76b9e3acf694211955d3374f3a7332f3
  ABI hash: f441d9a5f81a0380247c1ca3fe308912
  export-list hash: 0c482d6bd685afacba2a5a9ceb136973
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  LCA.leastCommonAncestor
  LCA.InNode{LCA.InNode label parent}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
80db3b45f19bda01d95a2949a5cfcc9d
  $tc'InNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1695106053765974205##
                   2883589310442916997##
                   LCA.$trModule
                   LCA.$tc'InNode1) -}
cc76887631c082b89c2bb878beaa86e4
  $tc'InNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InNode"#) -}
53039705abb4ea1ce6e4ddb1dfe4410d
  $tcInNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6000860712162020105##
                   18149493966816829257##
                   LCA.$trModule
                   LCA.$tcInNode1) -}
a30467bb335c129e604f3205a5bdf22f
  $tcInNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "InNode"#) -}
3e3b6a3971d8f8c1029602dc6b9f333f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module LCA.$trModule2 LCA.$trModule1) -}
ff028c3f556cdcbee631db3485b7e138
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LCA"#) -}
955e8af8691b49825648458949287672
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hw4-0.1.0.0-8ydcU7LkNiv7Z660KS3PPI"#) -}
15150ba464a2de5cc2f8203b959a3e03
  $wgoUp :: a -> GHC.Base.Maybe (LCA.InNode a) -> [LCA.InNode a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
d32a1ecb4fbf5d0ff22bab5852217eaf
  $wleastCommonAncestor ::
    GHC.Classes.Eq a =>
    a
    -> GHC.Base.Maybe (LCA.InNode a)
    -> LCA.InNode a
    -> GHC.Base.Maybe (LCA.InNode a)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><S,U><L,1*U(U,U)>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: GHC.Base.Maybe (LCA.InNode a))
                   (w1 :: LCA.InNode a) ->
                 letrec {
                   lastCommon :: [LCA.InNode a]
                                 -> [LCA.InNode a]
                                 -> GHC.Base.Maybe (LCA.InNode a)
                                 -> GHC.Base.Maybe (LCA.InNode a)
                     {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U> -}
                   = \ (ds :: [LCA.InNode a])
                       (l2 :: [LCA.InNode a])
                       (prev :: GHC.Base.Maybe (LCA.InNode a)) ->
                     case ds of wild {
                       [] -> prev
                       : ipv ipv1
                       -> case l2 of wild1 {
                            [] -> prev
                            : ipv2 ipv3
                            -> case ipv of wild2 { LCA.InNode ds1 ds2 ->
                               case ipv2 of wild3 { LCA.InNode ds3 ds4 ->
                               case GHC.Classes.== @ a w ds1 ds3 of wild4 {
                                 GHC.Types.False -> prev
                                 GHC.Types.True
                                 -> lastCommon
                                      ipv1
                                      ipv3
                                      (GHC.Base.Just @ (LCA.InNode a) wild2) } } } } }
                 } in
                 lastCommon
                   (LCA.$wgoUp @ a ww ww1)
                   (LCA.leastCommonAncestor_goUp @ a w1)
                   (GHC.Base.Nothing @ (LCA.InNode a))) -}
e55e1cfb80c9de9e80101b5362c73d5e
  data InNode a
    = InNode {label :: a, parent :: GHC.Base.Maybe (LCA.InNode a)}
    RecFlag: Recursive
fc8891c83d85d8f47f37ce61342e086f
  label :: LCA.InNode a -> a
  RecSel Left LCA.InNode
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: LCA.InNode a) ->
                 case ds of wild { LCA.InNode ds1 ds2 -> ds1 }) -}
dae6493c9c8fbd5408a462e0874be530
  leastCommonAncestor ::
    GHC.Classes.Eq a =>
    LCA.InNode a -> LCA.InNode a -> GHC.Base.Maybe (LCA.InNode a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(LS),1*U(U,U)><L,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: LCA.InNode a)
                   (w2 :: LCA.InNode a) ->
                 case w1 of ww { LCA.InNode ww1 ww2 ->
                 LCA.$wleastCommonAncestor @ a w ww1 ww2 w2 }) -}
d2d70cce4be4b4a546429e0040032891
  leastCommonAncestor_goUp :: LCA.InNode a -> [LCA.InNode a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: LCA.InNode a) ->
                 case w of ww { LCA.InNode ww1 ww2 -> LCA.$wgoUp @ a ww1 ww2 }) -}
db25b15b57f529b91a07e98c1032cad2
  parent :: LCA.InNode a -> GHC.Base.Maybe (LCA.InNode a)
  RecSel Left LCA.InNode
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: LCA.InNode a) ->
                 case ds of wild { LCA.InNode ds1 ds2 -> ds2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

