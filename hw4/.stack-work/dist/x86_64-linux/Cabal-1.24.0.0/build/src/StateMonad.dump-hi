
==================== FINAL INTERFACE ====================
2016-10-14 16:51:35.889515 UTC

interface hw4-0.1.0.0-8ydcU7LkNiv7Z660KS3PPI:StateMonad 8001
  interface hash: cb5028762bbee0665219679de3aaff7f
  ABI hash: e5453a30012ad1a8c68a775909c29acc
  export-list hash: e19ec883dfcdf40ebfdbace9f068b4e1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5a595dbb2829f2eae08395c08f428f01
  sig of: Nothing
  used TH splices: False
  where
exports:
  StateMonad.State{StateMonad.State runState}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
f2756fd77c7a4037c9ec9a989d60d823
  $fMonadState ::
    GHC.Base.Applicative (StateMonad.State s) =>
    GHC.Base.Monad (StateMonad.State s)
  DFunId
  {- Arity: 1, Strictness: <L,U>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s
                      ($dApplicative :: GHC.Base.Applicative (StateMonad.State s)).
                  @ (StateMonad.State s)
                  (StateMonad.$fMonadState_$cp1Monad @ s $dApplicative)
                  (StateMonad.$fMonadState_$c>>= @ s $dApplicative)
                  (StateMonad.$fMonadState_$c>> @ s $dApplicative)
                  (StateMonad.$fMonadState_$creturn @ s $dApplicative)
                  (StateMonad.$fMonadState_$cfail @ s $dApplicative) -}
f2756fd77c7a4037c9ec9a989d60d823
  $fMonadState1 ::
    GHC.Base.Applicative (StateMonad.State s) =>
    GHC.Base.String -> StateMonad.State s a
  {- Arity: 2, Strictness: <B,A><B,U>x, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ s
                   @ a
                   (w :: GHC.Base.Applicative (StateMonad.State s))
                   (w1 :: GHC.Base.String) ->
                 StateMonad.$wlvl @ s @ a w1) -}
f2756fd77c7a4037c9ec9a989d60d823
  $fMonadState_$c>> ::
    GHC.Base.Applicative (StateMonad.State s) =>
    forall a b.
    StateMonad.State s a
    -> StateMonad.State s b -> StateMonad.State s b
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   ($dApplicative :: GHC.Base.Applicative (StateMonad.State s))
                   @ a
                   @ b
                   (m1 :: StateMonad.State s a)
                   (k :: StateMonad.State s b) ->
                 StateMonad.$fMonadState_$c>>=
                   @ s
                   $dApplicative
                   @ a
                   @ b
                   m1
                   (\ (ds :: a) -> k)) -}
f2756fd77c7a4037c9ec9a989d60d823
  $fMonadState_$c>>= ::
    GHC.Base.Applicative (StateMonad.State s) =>
    forall a b.
    StateMonad.State s a
    -> (a -> StateMonad.State s b) -> StateMonad.State s b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(C(U(U,U)))><L,C(U(1*C1(U)))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (w :: GHC.Base.Applicative (StateMonad.State s))
                   @ a
                   @ b
                   (w1 :: StateMonad.State s a)
                   (w2 :: a -> StateMonad.State s b) ->
                 StateMonad.State
                   @ s
                   @ b
                   (\ (s1 :: s) ->
                    let {
                      ds :: (a, s) = case w1 of wild { StateMonad.State ds1 -> ds1 s1 }
                    } in
                    case w2
                           (case ds of wild { (,) a1 newState ->
                            a1 }) of wild { StateMonad.State ds1 ->
                    ds1 (case ds of wild1 { (,) a1 newState -> newState }) })) -}
f2756fd77c7a4037c9ec9a989d60d823
  $fMonadState_$cfail ::
    GHC.Base.Applicative (StateMonad.State s) =>
    forall a. GHC.Base.String -> StateMonad.State s a
  {- Arity: 2, Strictness: <B,A><B,U>x,
     Unfolding: InlineRule (2, True, True)
                (\ @ s
                   ($dApplicative :: GHC.Base.Applicative (StateMonad.State s))
                   @ a
                   (eta :: GHC.Base.String) ->
                 StateMonad.$fMonadState1 @ s @ a $dApplicative eta) -}
f2756fd77c7a4037c9ec9a989d60d823
  $fMonadState_$cp1Monad ::
    GHC.Base.Applicative (StateMonad.State s) =>
    GHC.Base.Applicative (StateMonad.State s)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ s
                   ($dApplicative :: GHC.Base.Applicative (StateMonad.State s)) ->
                 $dApplicative) -}
f2756fd77c7a4037c9ec9a989d60d823
  $fMonadState_$creturn ::
    GHC.Base.Applicative (StateMonad.State s) =>
    forall a. a -> StateMonad.State s a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   ($dApplicative :: GHC.Base.Applicative (StateMonad.State s))
                   @ a
                   (a1 :: a) ->
                 StateMonad.State @ s @ a (\ (s1 :: s) -> (a1, s1))) -}
75431eb5a3f992ab624a862e926617e5
  $tc'State :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5234173850234222864##
                   7259532644647904298##
                   StateMonad.$trModule
                   StateMonad.$tc'State1) -}
bdaa180916dcba8df5440aa12fee6d62
  $tc'State1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'State"#) -}
14074b3d3bf5ee5ff6d149e5a4bd32b6
  $tcState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   343664082513094370##
                   2194157643540643704##
                   StateMonad.$trModule
                   StateMonad.$tcState1) -}
ce65b6be8ff51aaf0d2070e0be7bf1db
  $tcState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "State"#) -}
a8fd78cda185a2fd43fa3191c4bf3fbf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StateMonad.$trModule2
                   StateMonad.$trModule1) -}
0bba99a3ad4fa4403561975905109f9a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StateMonad"#) -}
802ecdf4ed94e9dbdd4b078885856796
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hw4-0.1.0.0-8ydcU7LkNiv7Z660KS3PPI"#) -}
f2756fd77c7a4037c9ec9a989d60d823
  $wlvl :: GHC.Base.String -> StateMonad.State s a
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
f2756fd77c7a4037c9ec9a989d60d823
  data State s a = State {runState :: s -> (a, s)}
1162760d5a28902ea9f941893b10530c
  runState :: StateMonad.State s a -> s -> (a, s)
  RecSel Left StateMonad.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ s @ a (ds :: StateMonad.State s a) ->
                 case ds of wild { StateMonad.State ds1 -> ds1 }) -}
instance [safe] GHC.Base.Monad [StateMonad.State]
  = StateMonad.$fMonadState
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

