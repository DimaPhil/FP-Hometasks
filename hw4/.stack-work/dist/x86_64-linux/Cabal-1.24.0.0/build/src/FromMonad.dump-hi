
==================== FINAL INTERFACE ====================
2016-10-14 16:51:36.074785 UTC

interface hw4-0.1.0.0-8ydcU7LkNiv7Z660KS3PPI:FromMonad [orphan module] 8001
  interface hash: 0dd7e9ab11859aad8095cfc094fe40e6
  ABI hash: c0a75b6911a4ce7dd9c7d044bebbb532
  export-list hash: 2baec5d91ee6e37f03773a5a9eb6361c
  orphan hash: c0fee7ce12e33c8fee1aaf9d73a204be
  flag hash: 4d9540608fa4af88916346eaba38fd5f
  sig of: Nothing
  used TH splices: False
  where
exports:
module dependencies: MonadFish MonadJoin
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  MonadFish 67dcdc33a2204f18ea2b8ee627ea9656
  exports: ab82301f4577555c6dc34131996dede0
  MonadFish 92d56bc4b968792a2afec3454a973fcc
import  -/  MonadJoin f624d6e4af61d2c06c963c915c9539d4
  exports: 85b937455f0e0e5d06206ace7eb16427
  MonadJoin e728c4b3a8bc40ebdb3b6491eaef9138
761f0af5f6baa3e0180ac3245f2d3b6e
  $fMonadFishm :: GHC.Base.Monad m => MonadFish.MonadFish m
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,C(C1(U)),A,1*U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *) ($dMonad :: GHC.Base.Monad m).
                  @ m
                  (FromMonad.$fMonadFishm_$creturnFish @ m $dMonad)
                  (FromMonad.$fMonadFishm_$c>=> @ m $dMonad) -}
3bb2b77042ed8447c988c8b580f2af7c
  $fMonadFishm_$c>=> ::
    GHC.Base.Monad m =>
    forall a b c. (a -> m b) -> (b -> m c) -> a -> m c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A)><L,C(U)><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   @ a
                   @ b
                   @ c
                   (f :: a -> m b)
                   (g :: b -> m c)
                   (eta :: a) ->
                 Control.Monad.>=> @ m @ a @ b @ c $dMonad f g eta) -}
61a54000f09a16d674397a7e0e281101
  $fMonadFishm_$creturnFish :: GHC.Base.Monad m => forall a. a -> m a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),U(A,A,A,U,A)>,
     Unfolding: InlineRule (0, True, True) GHC.Base.return -}
6d62f1a16dee05a80a50673804279b6d
  $fMonadJoinm :: GHC.Base.Monad m => MonadJoin.MonadJoin m
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,C(C1(U)),A,1*U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *) ($dMonad :: GHC.Base.Monad m).
                  @ m
                  (FromMonad.$fMonadFishm_$creturnFish @ m $dMonad)
                  (FromMonad.$fMonadJoinm_$cjoin @ m $dMonad) -}
d23f79161c452571b414ede3708da0df
  $fMonadJoinm_$cjoin :: GHC.Base.Monad m => forall a. m (m a) -> m a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,C(C1(U)),A,A,A)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   @ a
                   (eta :: m (m a)) ->
                 GHC.Base.join @ m @ a $dMonad eta) -}
9132747f2ffb9a4652e2654c3109932f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FromMonad.$trModule2
                   FromMonad.$trModule1) -}
cdb3b354e47cb2bc2157d298c5267acb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FromMonad"#) -}
e2debe5fb2175fea25520ee50558880d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hw4-0.1.0.0-8ydcU7LkNiv7Z660KS3PPI"#) -}
instance [safe] MonadFish.MonadFish [.] = FromMonad.$fMonadFishm
instance [safe] MonadJoin.MonadJoin [.] = FromMonad.$fMonadJoinm
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

